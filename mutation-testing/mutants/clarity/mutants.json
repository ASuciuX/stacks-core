[
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 265,
    "function": "RollbackWrapper<'a>::commit",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 376,
    "function": "CallableType::get_identifier",
    "return_type": "-> FunctionIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 801,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_raw",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from_iter([String::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![Default::default()], vec![], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 144,
    "function": "DefinedFunction::execute_apply",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1038,
    "function": "ClarityDatabase<'a>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1137,
    "function": "ExecutionCost::proportion_largest_dimension",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 871,
    "function": "Value::size",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([\"xyzzy\".into()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1766,
    "function": "TupleTypeSignature::size",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 332,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 78,
    "function": "Lexer<'a>::read_char",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 504,
    "function": "special_greater",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 111,
    "function": "Lexer<'a>::report_line_ending",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 115,
    "function": "DefinitionSorter::probe_for_dependencies",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 271,
    "function": "AssetMap::get_next_stx_burn_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 172,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 210,
    "function": "ContractContext::into_contract_analysis",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1346,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 852,
    "function": "OwnedEnvironment<'a, 'hooks>::destruct",
    "return_type": "-> Option<(ClarityDatabase<'a>, LimitedCostTracker)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 326,
    "function": "Lexer<'a>::read_integer",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 136,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1415,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 172,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 557,
    "function": "native_sub",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 48,
    "function": "make_func_ref",
    "return_type": "-> FunctionRef",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 194,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1301,
    "function": "TypeSignature::list_of",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 740,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 47,
    "function": "I128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 145,
    "function": "FunctionType::check_args_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 45,
    "function": "FunctionType::check_args",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 45,
    "function": "rollback_edits_push",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/boolean.rs",
    "line": 27,
    "function": "type_force_bool",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 288,
    "function": "build_ast_precheck_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 222,
    "function": "PreSymbolicExpression::cons",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 296,
    "function": "check_special_as_max_len",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 201,
    "function": "TraitsResolver::probe_for_generics",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 726,
    "function": "STXBalanceSnapshot<'db, 'conn>::unlock_available_tokens_if_any",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/datamaps.rs",
    "line": 25,
    "function": "assert_executes",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 217,
    "function": "CheckError::set_expressions",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 479,
    "function": "check_principal_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 270,
    "function": "LimitedCostTracker::cost_function_references",
    "return_type": "-> HashMap<&'static ClarityCostFunction, ClarityCostFunctionReference>",
    "replacement": "HashMap::from_iter([(&Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 0, 0)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 947,
    "function": "ClarityDatabase<'a>::get_block_vrf_seed",
    "return_type": "-> VRFSeed",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::new(Ok(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 186,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 194,
    "function": "<impl SymbolicExpressionCommon for PreSymbolicExpression>::set_id",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 479,
    "function": "AssetMap::get_fungible_tokens",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::new(BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 837,
    "function": "STXBalance::checked_add_unlocked_amount",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 174,
    "function": "native_string_to_uint",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1870,
    "function": "ClarityDatabase<'a>::make_key_for_account",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 292,
    "function": "ContractContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 317,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 377,
    "function": "native_bitwise_or",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 36,
    "function": "<impl BuildASTPass for TraitsResolver>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 572,
    "function": "native_log2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 323,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 462,
    "function": "special_leq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 145,
    "function": "FunctionType::check_args_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 210,
    "function": "Lexer<'a>::read_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 120,
    "function": "special_map",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 326,
    "function": "load_state_summary",
    "return_type": "-> Result<CostStateSummary>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1006,
    "function": "<impl CostTracker for LimitedCostTracker>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 40,
    "function": "version_matches_testnet",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 546,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 172,
    "function": "ContractContext::add_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 227,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 86,
    "function": "TraitContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 95,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 892,
    "function": "STXBalance::get_available_balance_at_burn_block",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 220,
    "function": "is_some",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 259,
    "function": "LimitedCostTracker::contract_call_circuits",
    "return_type": "-> HashMap<(QualifiedContractIdentifier, ClarityName), ClarityCostFunctionReference>",
    "replacement": "HashMap::from_iter([((Default::default(), Default::default()), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 28,
    "function": "check_special_get_owner",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/diagnostic.rs",
    "line": 67,
    "function": "<impl Display for Diagnostic>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 521,
    "function": "Parser<'a>::read_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 123,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1760,
    "function": "ClarityDatabase<'a>::get_ft_supply",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 36,
    "function": "<impl BuildASTPass for TraitsResolver>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2601,
    "function": "make_all_api_reference",
    "return_type": "-> ReferenceAPIs",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 716,
    "function": "TypeChecker<'a, 'b>::inner_type_check",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 355,
    "function": "DefinedFunction::get_arguments",
    "return_type": "-> &Vec<ClarityName>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 53,
    "function": "check_vary",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 343,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 172,
    "function": "ContractContext::add_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 195,
    "function": "check_special_tuple_cons",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 396,
    "function": "TypeSignature::max_serialized_size",
    "return_type": "-> Result<u32, CheckErrors>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 61,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 168,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/defines.rs",
    "line": 30,
    "function": "assert_eq_err",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 699,
    "function": "TypedNativeFunction::type_native_function",
    "return_type": "-> TypedNativeFunction",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1070,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 999,
    "function": "TypeSignature::contract_name_string_ascii_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1006,
    "function": "ClarityDatabase<'a>::get_stx_btc_ops_processed",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1433,
    "function": "<impl From for PrincipalData>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 58,
    "function": "ExpressionIdentifier::run_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 88,
    "function": "ContractContext::get_nft_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1951,
    "function": "ClarityDatabase<'a>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 58,
    "function": "ExpressionIdentifier::run_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 269,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 357,
    "function": "DefinitionSorter::probe_for_dependencies_in_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 281,
    "function": "<impl HeadersDB for NullHeadersDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 169,
    "function": "lookup_variable",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 137,
    "function": "AnalysisDatabase<'a>::get_clarity_version",
    "return_type": "-> CheckResult<ClarityVersion>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 315,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_open_chain_tip",
    "return_type": "-> StacksBlockId",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 112,
    "function": "ReadOnlyChecker<'a, 'b>::check_top_level_expression",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 716,
    "function": "ClarityDatabase<'a>::ustx_liquid_supply_key",
    "return_type": "-> &'static str",
    "replacement": "\"xyzzy\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 198,
    "function": "ContractContext::get_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 168,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 196,
    "function": "CoverageReporter::produce_lcov",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 112,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 53,
    "function": "check_vary",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 472,
    "function": "ClarityDatabase<'a>::get",
    "return_type": "-> Option<T>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 0, 0)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 557,
    "function": "execute",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 210,
    "function": "Lexer<'a>::read_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 104,
    "function": "<impl MemoryConsumer for Value>::get_memory_use",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 182,
    "function": "SqliteConnection::memory",
    "return_type": "-> Result<Connection>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 112,
    "function": "ReadOnlyChecker<'a, 'b>::check_top_level_expression",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/tuples.rs",
    "line": 79,
    "function": "tuple_merge",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1108,
    "function": "Value::expect_optional",
    "return_type": "-> Option<Value>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 198,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 368,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 890,
    "function": "test_factorial_contract",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 336,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1085,
    "function": "ClarityDatabase<'a>::get_microblock_poison_report",
    "return_type": "-> Option<(StandardPrincipalData, u16)>",
    "replacement": "Some((Default::default(), 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 153,
    "function": "build_ast_with_diagnostics",
    "return_type": "-> (ContractAST, Vec<Diagnostic>, bool)",
    "replacement": "(Default::default(), vec![Default::default()], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 535,
    "function": "TypeSignature::admits_type_v2_0",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 465,
    "function": "AssetMap::get_stx_burned_total",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 790,
    "function": "STXBalance::amount_locked",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 162,
    "function": "native_string_to_int",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from_iter([(Default::default(), BTreeMap::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 104,
    "function": "ContractAnalysis::replace_contract_cost_tracker",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 441,
    "function": "ClarityDatabase<'a>::commit",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 324,
    "function": "DefinitionSorter::probe_for_dependencies_in_define_args",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 208,
    "function": "CheckError::has_expression",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 97,
    "function": "<impl From for StandardPrincipalData>::from",
    "return_type": "-> StandardPrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1814,
    "function": "ContractContext::lookup_variable",
    "return_type": "-> Option<&Value>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 434,
    "function": "special_leq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 465,
    "function": "AssetMap::get_stx_burned_total",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 65,
    "function": "DefinitionSorter::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 767,
    "function": "test_readwrite_violation_dynamic_dispatch",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 194,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 861,
    "function": "TupleTypeSignature::get_type_map",
    "return_type": "-> &BTreeMap<ClarityName, TypeSignature>",
    "replacement": "&BTreeMap::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 1079,
    "function": "test_cc_stack_depth",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1372,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 82,
    "function": "TypingContext<'a>::extend",
    "return_type": "-> CheckResult<TypingContext>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 485,
    "function": "check_function_arg_signature",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 191,
    "function": "handle_define_nonfungible_asset",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 512,
    "function": "STXBalanceSnapshot<'db, 'conn>::extend_lock_v2",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/conversions.rs",
    "line": 36,
    "function": "check_special_from_consensus_buff",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 813,
    "function": "LimitedCostTracker::set_total",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/defines.rs",
    "line": 191,
    "function": "test_recursive_panic",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 152,
    "function": "<impl CostTracker for ()>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 561,
    "function": "ClarityDatabase<'a>::insert_contract_hash",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 133,
    "function": "execute_transaction",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>), Error>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1023,
    "function": "ClarityDatabase<'a>::make_microblock_poison_key",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::new(Some(BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 604,
    "function": "native_bitwise_right_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 58,
    "function": "AnalysisDatabase<'a>::begin",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 34,
    "function": "version_matches_mainnet",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 253,
    "function": "PrincipalData::inner_consensus_serialize",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 141,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 79,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 580,
    "function": "ClarityDatabase<'a>::get_contract_src",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1072,
    "function": "ClarityDatabase<'a>::get_microblock_pubkey_hash_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from_iter([(Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())]))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1699,
    "function": "GlobalContext<'a, 'hooks>::begin",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 824,
    "function": "test_bad_call_with_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 28,
    "function": "check",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 295,
    "function": "<impl HeadersDB for NullHeadersDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 62,
    "function": "TraitContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 277,
    "function": "DefineFunctions::try_parse",
    "return_type": "-> Option<(DefineFunctions, &[SymbolicExpression])>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 766,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 251,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1055,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 128,
    "function": "Lexer<'a>::skip_whitespace",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1411,
    "function": "Environment<'a, 'b, 'hooks>::push_to_event_batch",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 575,
    "function": "native_mod",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 88,
    "function": "ReadOnlyChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1385,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/maps.rs",
    "line": 106,
    "function": "check_set_or_insert_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 314,
    "function": "AssetMap::add_asset_transfer",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 959,
    "function": "drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 169,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1870,
    "function": "ClarityDatabase<'a>::make_key_for_account",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 599,
    "function": "special_insert_entry_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1290,
    "function": "ClarityDatabase<'a>::make_key_for_data_map_entry",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 72,
    "function": "sqlite_has_entry",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 819,
    "function": "ClarityDatabase<'a>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 108,
    "function": "check_special_mint_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 40,
    "function": "<impl BuildASTPass for SugarExpander>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 203,
    "function": "check_special_concat",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 545,
    "function": "execute_against_version",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 1, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1784,
    "function": "GlobalContext<'a, 'hooks>::destruct",
    "return_type": "-> Option<(ClarityDatabase<'a>, LimitedCostTracker)>",
    "replacement": "Some((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 625,
    "function": "check_secp256k1_verify",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 641,
    "function": "<impl SequencedValue for BuffData>::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1114,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_mul",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 354,
    "function": "<impl TryFrom for BufferLength>::try_from",
    "return_type": "-> Result<BufferLength>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1071,
    "function": "Value::expect_list",
    "return_type": "-> Vec<Value>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 926,
    "function": "FunctionSignature::check_args_trait_compliance",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1400,
    "function": "<impl From for PrincipalData>::from",
    "return_type": "-> PrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 777,
    "function": "special_get_balance",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 404,
    "function": "clarity2_implicit_cast",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 879,
    "function": "ClarityDatabase<'a>::get_sortition_id_for_stacks_tip",
    "return_type": "-> Option<SortitionId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 62,
    "function": "AnalysisDatabase<'a>::commit",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 626,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::new((Default::default(), (Default::default(), Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 242,
    "function": "<impl From for CheckError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 373,
    "function": "native_bitwise_and",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 186,
    "function": "ContractContext::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "Some(&(Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 67,
    "function": "<impl DiagnosableError for LexerError>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1560,
    "function": "Environment<'a, 'b, 'hooks>::register_ft_burn_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 575,
    "function": "native_mod",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 843,
    "function": "parse_cost",
    "return_type": "-> Result<ExecutionCost>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 317,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 323,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/maps.rs",
    "line": 74,
    "function": "check_special_delete_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1694,
    "function": "GlobalContext<'a, 'hooks>::is_read_only",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 42,
    "function": "<impl Error for Error>::cause",
    "return_type": "-> Option<&dyn std::error::Error>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 333,
    "function": "ContractInterfaceVariable::from_map",
    "return_type": "-> Vec<ContractInterfaceVariable>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1714,
    "function": "GlobalContext<'a, 'hooks>::commit",
    "return_type": "-> Result<(Option<AssetMap>, Option<EventBatch>)>",
    "replacement": "Ok((None, None))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 263,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1085,
    "function": "ClarityDatabase<'a>::get_microblock_poison_report",
    "return_type": "-> Option<(StandardPrincipalData, u16)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1023,
    "function": "ClarityDatabase<'a>::make_microblock_poison_key",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 899,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1829,
    "function": "ContractContext::is_explicitly_implementing_trait",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 96,
    "function": "native_buff_to_uint_le",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 266,
    "function": "PrincipalData::inner_consensus_deserialize",
    "return_type": "-> Result<PrincipalData, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1274,
    "function": "Environment<'a, 'b, 'hooks>::initialize_contract",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1230,
    "function": "ExecutionCost::exceeds",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 132,
    "function": "<impl Display for Error>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 48,
    "function": "<impl BuildASTPass for StackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 157,
    "function": "<impl Error for Error>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 979,
    "function": "STXBalance::was_locked_by_v3",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 163,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 118,
    "function": "ContractAnalysis::add_variable_type",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 240,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 160,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 80,
    "function": "is_err_code",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 624,
    "function": "TypeSignature::admits_type_v2_1",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 186,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 234,
    "function": "apply",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 230,
    "function": "PreSymbolicExpression::cons",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 156,
    "function": "FunctionType::check_args_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 160,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 345,
    "function": "DefinitionSorter::probe_for_dependencies_in_list_of_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1889,
    "function": "LocalContext<'a>::extend",
    "return_type": "-> Result<LocalContext<'a>>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 758,
    "function": "ClarityDatabase<'a>::increment_ustx_liquid_supply",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 115,
    "function": "DefinitionSorter::probe_for_dependencies",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1114,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_mul",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 266,
    "function": "PreSymbolicExpression::span",
    "return_type": "-> &Span",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 343,
    "function": "check_special_match_resp",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 372,
    "function": "PreSymbolicExpression::match_list",
    "return_type": "-> Option<&[PreSymbolicExpression]>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 893,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 287,
    "function": "check_special_set_var",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 546,
    "function": "special_less",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 476,
    "function": "ListTypeData::get_max_len",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 117,
    "function": "ParseError::set_pre_expression",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 899,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 513,
    "function": "execute_with_parameters",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 105,
    "function": "cost_input_sized_vararg",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 175,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 479,
    "function": "AssetMap::get_fungible_tokens",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::from_iter([BTreeMap::from_iter([(Default::default(), Default::default())])])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 369,
    "function": "native_bitwise_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 114,
    "function": "check_legal_define",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 70,
    "function": "AnalysisDatabase<'a>::storage_key",
    "return_type": "-> &'static str",
    "replacement": "\"\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 865,
    "function": "TupleTypeSignature::admits",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 98,
    "function": "ContractAnalysis::take_contract_cost_tracker",
    "return_type": "-> LimitedCostTracker",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 515,
    "function": "TypeSignature::is_no_type",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 57,
    "function": "TypeMap::set_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 990,
    "function": "Environment<'a, 'b, 'hooks>::eval_read_only_with_rules",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 172,
    "function": "STXMintEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 183,
    "function": "ContractAnalysis::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 291,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 751,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 268,
    "function": "<impl Error for CheckErrors>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1230,
    "function": "ExecutionCost::exceeds",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1026,
    "function": "Value::expect_ascii",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 984,
    "function": "ClarityDatabase<'a>::get_block_reward",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 860,
    "function": "ClarityDatabase<'a>::get_block_time",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 949,
    "function": "STXBalance::get_total_balance",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 189,
    "function": "STXLockEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 292,
    "function": "ContractContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 912,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 369,
    "function": "DefinitionSorter::probe_for_dependencies_in_key_value_pair",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1627,
    "function": "TypeSignature::depth",
    "return_type": "-> u8",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 367,
    "function": "check_special_element_at",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 164,
    "function": "ContractContext::is_contract",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([Some(\"xyzzy\".into())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 177,
    "function": "make_contract_hash_key",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1175,
    "function": "Value::serialize_to_vec",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 369,
    "function": "eval_all",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 732,
    "function": "ClarityDatabase<'a>::set_clarity_epoch_version",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 395,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1595,
    "function": "GlobalContext<'a, 'hooks>::is_top_level",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 436,
    "function": "ClarityDatabase<'a>::begin",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 320,
    "function": "ContractContext::get_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 937,
    "function": "ClarityDatabase<'a>::get_pox_payout_addrs_for_burnchain_height",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 330,
    "function": "no_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 315,
    "function": "RollbackWrapper<'a>::put",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 153,
    "function": "build_ast_with_diagnostics",
    "return_type": "-> (ContractAST, Vec<Diagnostic>, bool)",
    "replacement": "(Default::default(), vec![], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1878,
    "function": "LocalContext<'a>::depth",
    "return_type": "-> u16",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1446,
    "function": "TypeSignature::parse_string_ascii_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 59,
    "function": "<impl AnalysisPass for ReadOnlyChecker<'a, 'b>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 539,
    "function": "check_contract_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 488,
    "function": "GraphWalker::get_cycling_dependencies",
    "return_type": "-> Option<Vec<usize>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 516,
    "function": "SymbolicExpression::span",
    "return_type": "-> &Span",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1408,
    "function": "ClarityDatabase<'a>::set_entry",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 290,
    "function": "<impl StacksMessageCodec for PrincipalData>::consensus_serialize",
    "return_type": "-> Result<(), codec_error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 66,
    "function": "Lexer<'a>::add_diagnostic",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 870,
    "function": "STXBalance::canonical_repr_at_block",
    "return_type": "-> (STXBalance, u128)",
    "replacement": "(Default::default(), 0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 512,
    "function": "special_set_entry_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 191,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 172,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1053,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from_iter([Some(BTreeMap::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 419,
    "function": "special_geq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 353,
    "function": "is_reserved",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from_iter([0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 246,
    "function": "Lexer<'a>::read_trait_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 490,
    "function": "special_greater_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 96,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![(Default::default(), \"xyzzy\".into())]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1627,
    "function": "TypeSignature::depth",
    "return_type": "-> u8",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 355,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 875,
    "function": "Value::depth",
    "return_type": "-> u8",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1744,
    "function": "test_pass_embedded_trait_to_subtrait_list",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 202,
    "function": "TraitIdentifier::parse",
    "return_type": "-> Result<(Option<StandardPrincipalData>, ContractName, ClarityName)>",
    "replacement": "Ok((Some(Default::default()), Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1818,
    "function": "ContractContext::lookup_function",
    "return_type": "-> Option<DefinedFunction>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 652,
    "function": "OwnedEnvironment<'a, 'hooks>::execute_in_env",
    "return_type": "-> std::result::Result<(A, AssetMap, Vec<StacksTransactionEvent>), E>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 119,
    "function": "Parser<'a>::add_diagnostic",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 837,
    "function": "STXBalance::checked_add_unlocked_amount",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 706,
    "function": "Lexer<'a>::read_token",
    "return_type": "-> Result<PlacedToken, LexerError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 421,
    "function": "Graph::get_node_descendants",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1095,
    "function": "Environment<'a, 'b, 'hooks>::epoch",
    "return_type": "-> &StacksEpochId",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 56,
    "function": "SugarExpander::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 41,
    "function": "U128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 223,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1357,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1829,
    "function": "ContractContext::is_explicitly_implementing_trait",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 240,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 120,
    "function": "inner_handle_tuple_get",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1053,
    "function": "Value::expect_buff",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1525,
    "function": "Environment<'a, 'b, 'hooks>::register_ft_transfer_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 519,
    "function": "TypeSignature::admits",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 962,
    "function": "ClarityDatabase<'a>::get_miner_spend_winner",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1625,
    "function": "ClarityDatabase<'a>::load_ft",
    "return_type": "-> Result<FungibleTokenMetadata>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 119,
    "function": "Parser<'a>::add_diagnostic",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 65,
    "function": "DefinitionSorter::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 244,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_ast_rules",
    "return_type": "-> ASTRules",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 288,
    "function": "Lexer<'a>::read_principal",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1201,
    "function": "ExecutionCost::add",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 284,
    "function": "AssetMap::get_next_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 173,
    "function": "<impl DiagnosableError for ParseErrors>::message",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 179,
    "function": "ContractAnalysis::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::from_iter([(Some(Default::default()), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 345,
    "function": "Lexer<'a>::read_hex",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 73,
    "function": "native_unwrap_err",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 532,
    "function": "special_less_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1722,
    "function": "ListTypeData::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from_iter([(Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())]))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 582,
    "function": "check_principal_construct",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 131,
    "function": "tl_env_factory",
    "return_type": "-> TopLevelMemoryEnvironmentGenerator",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 985,
    "function": "TypeSignature::max_string_utf8",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 381,
    "function": "native_bitwise_not",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 1109,
    "function": "STXBalance::can_transfer_at_burn_block",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 359,
    "function": "DefinedFunction::get_arg_types",
    "return_type": "-> &Vec<TypeSignature>",
    "replacement": "&vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1329,
    "function": "<impl StacksMessageCodec for Value>::consensus_deserialize",
    "return_type": "-> Result<Value, codec_error>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 314,
    "function": "eval",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 315,
    "function": "FTMintEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 82,
    "function": "check_special_mint_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 160,
    "function": "test_contract_caller",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 172,
    "function": "check_special_transfer_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 153,
    "function": "build_ast_with_diagnostics",
    "return_type": "-> (ContractAST, Vec<Diagnostic>, bool)",
    "replacement": "(Default::default(), vec![Default::default()], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 647,
    "function": "ClarityDatabase<'a>::load_contract_analysis",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 113,
    "function": "check_special_mint_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 126,
    "function": "<impl From for SerializationError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 60,
    "function": "special_is_standard",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 920,
    "function": "STXBalance::get_locked_balance_at_burn_block",
    "return_type": "-> (u128, u64)",
    "replacement": "(1, 1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 126,
    "function": "handle_define_variable",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 59,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![(Default::default(), \"xyzzy\".into())]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 571,
    "function": "clarity2_trait_check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 91,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::compute_cost",
    "return_type": "-> Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 1061,
    "function": "special_burn_asset_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 748,
    "function": "ClarityDatabase<'a>::set_ustx_liquid_supply",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 213,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 96,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![(Default::default(), String::new())]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 260,
    "function": "check_special_fetch_var",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1938,
    "function": "ClarityDatabase<'a>::get_account_nonce",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1818,
    "function": "ContractContext::lookup_function",
    "return_type": "-> Option<DefinedFunction>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 104,
    "function": "CoverageReporter::executable_lines",
    "return_type": "-> Vec<u32>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 172,
    "function": "ContractContext::add_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from_iter([Some(())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 579,
    "function": "native_bitwise_left_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 809,
    "function": "get_signature",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 263,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 920,
    "function": "STXBalance::get_locked_balance_at_burn_block",
    "return_type": "-> (u128, u64)",
    "replacement": "(0, 0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1372,
    "function": "TypeSignature::parse_atom_type",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 203,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 448,
    "function": "special_leq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 0, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 142,
    "function": "<impl CostTracker for ()>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 49,
    "function": "check_special_some",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 307,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_block_at_height",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::from(Ok(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 325,
    "function": "check_special_equals",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 92,
    "function": "ArithmeticOnlyChecker<'a>::check_define_function",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 160,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 831,
    "function": "Value::err_uint",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 419,
    "function": "special_geq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::from((None, Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 396,
    "function": "STXBalanceSnapshot<'db, 'conn>::can_transfer",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1210,
    "function": "ExecutionCost::sub",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 208,
    "function": "<impl From for CostStateSummary>::from",
    "return_type": "-> CostStateSummary",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 356,
    "function": "PreSymbolicExpression::match_atom_value",
    "return_type": "-> Option<&Value>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 223,
    "function": "<impl ClarityBackingStore for NullBackingStore>::set_block_hash",
    "return_type": "-> Result<StacksBlockId>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 409,
    "function": "STXBalanceSnapshot<'db, 'conn>::credit",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 93,
    "function": "AnalysisDatabase<'a>::load_contract_non_canonical",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 54,
    "function": "DefinitionSorter::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1445,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1263,
    "function": "ClarityDatabase<'a>::create_map",
    "return_type": "-> DataMapMetadata",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 168,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 28,
    "function": "inner_unwrap",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 970,
    "function": "Value::string_utf8_from_string_utf8_literal",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 522,
    "function": "Value::deserialize_read",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 96,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 229,
    "function": "special_fetch_variable_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 305,
    "function": "inner_put",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 520,
    "function": "SymbolicExpression::atom_value",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 476,
    "function": "ListTypeData::get_max_len",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 97,
    "function": "TypingContext<'a>::lookup_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1694,
    "function": "GlobalContext<'a, 'hooks>::is_read_only",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 164,
    "function": "<impl Display for ClarityCostFunctionReference>::fmt",
    "return_type": "-> ::std::fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 118,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 178,
    "function": "produce_docs_refs",
    "return_type": "-> BTreeMap<String, ContractRef>",
    "replacement": "BTreeMap::from_iter([(\"xyzzy\".into(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 358,
    "function": "STXBalanceSnapshot<'db, 'conn>::get_available_balance",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 54,
    "function": "DefinitionSorter::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 742,
    "function": "test_aborts",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 369,
    "function": "native_bitwise_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 691,
    "function": "STXBalanceSnapshot<'db, 'conn>::accelerate_unlock",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 279,
    "function": "check_argument_count",
    "return_type": "-> Result<(), CheckErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 62,
    "function": "check_special_map",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2626,
    "function": "make_json_api_reference",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2532,
    "function": "make_keyword_reference",
    "return_type": "-> Option<KeywordAPI>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1427,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1527,
    "function": "TupleData::get_owned",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 0, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 60,
    "function": "check_special_error",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 112,
    "function": "eval_with_new_binding",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 178,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 324,
    "function": "DefinitionSorter::probe_for_dependencies_in_define_args",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 724,
    "function": "ClarityDatabase<'a>::get_clarity_epoch_version",
    "return_type": "-> StacksEpochId",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1361,
    "function": "ClarityDatabase<'a>::fetch_entry_with_size",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 156,
    "function": "FunctionType::check_args_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 134,
    "function": "check_special_asserts",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 728,
    "function": "get_input_type_string",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 343,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1760,
    "function": "GlobalContext<'a, 'hooks>::handle_tx_result",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 942,
    "function": "Value::buff_from",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 634,
    "function": "ClarityDatabase<'a>::fetch_metadata_manual",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 88,
    "function": "native_buff_to_int_le",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 312,
    "function": "ContractContext::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1626,
    "function": "GlobalContext<'a, 'hooks>::log_token_transfer",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 81,
    "function": "SqliteConnection::get",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 194,
    "function": "ContractContext::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 376,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1983,
    "function": "CallStack::make_stack_trace",
    "return_type": "-> StackTrace",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 265,
    "function": "check_special_fetch_var",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 318,
    "function": "ContractInterfaceNonFungibleTokens::from_map",
    "return_type": "-> Vec<Self>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 409,
    "function": "special_replace_at",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 66,
    "function": "<impl Display for Error>::fmt",
    "return_type": "-> std::fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 748,
    "function": "STXBalance::initial",
    "return_type": "-> STXBalance",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 40,
    "function": "update_expression_id",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 533,
    "function": "SequenceData::is_list",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 699,
    "function": "ClarityDatabase<'a>::has_contract",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 263,
    "function": "AssetMap::get_next_stx_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1253,
    "function": "<impl Display for ResponseData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1714,
    "function": "GlobalContext<'a, 'hooks>::commit",
    "return_type": "-> Result<(Option<AssetMap>, Option<EventBatch>)>",
    "replacement": "Ok((Some(Default::default()), None))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1115,
    "function": "map_no_contract_as_none",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 579,
    "function": "native_bitwise_left_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 66,
    "function": "Lexer<'a>::add_diagnostic",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1490,
    "function": "Environment<'a, 'b, 'hooks>::register_nft_mint_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1246,
    "function": "Environment<'a, 'b, 'hooks>::evaluate_at_block",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 242,
    "function": "from_consensus_buff",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/version.rs",
    "line": 27,
    "function": "ClarityVersion::default_for_epoch",
    "return_type": "-> ClarityVersion",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 269,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 274,
    "function": "ArithmeticOnlyChecker<'a>::check_function_application",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1070,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 327,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 319,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_open_chain_tip_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([true])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 490,
    "function": "AssetMap::get_nonfungible_tokens",
    "return_type": "-> Option<&Vec<Value>>",
    "replacement": "Some(&vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 355,
    "function": "DefinedFunction::get_arguments",
    "return_type": "-> &Vec<ClarityName>",
    "replacement": "&vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 60,
    "function": "<impl Error for Error>::source",
    "return_type": "-> Option<&(dyn std::error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 937,
    "function": "ClarityDatabase<'a>::get_pox_payout_addrs_for_burnchain_height",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 557,
    "function": "native_sub",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 199,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1939,
    "function": "CallStack::depth",
    "return_type": "-> usize",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1133,
    "function": "Value::try_deserialize_hex_untyped",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 190,
    "function": "ContractAnalysis::get_defined_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 47,
    "function": "I128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 250,
    "function": "check_special_get_token_supply",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 306,
    "function": "check_special_match_opt",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![Default::default()], vec![], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 125,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1069,
    "function": "Environment<'a, 'b, 'hooks>::eval_raw",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1302,
    "function": "ClarityDatabase<'a>::make_key_for_data_map_entry_serialized",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1462,
    "function": "test_embedded_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/defines.rs",
    "line": 58,
    "function": "test_accept_options",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 79,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1917,
    "function": "<impl Display for BufferLength>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![], vec![], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1878,
    "function": "ClarityDatabase<'a>::make_key_for_account_nonce",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 420,
    "function": "RollbackWrapper<'a>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2557,
    "function": "make_for_special",
    "return_type": "-> FunctionAPI",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 247,
    "function": "SequenceData::atom_values",
    "return_type": "-> Vec<SymbolicExpression>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 376,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 232,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new(Some(()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 172,
    "function": "ContractContext::add_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::from_iter([BTreeSet::from_iter([Default::default()])])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 490,
    "function": "special_greater_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1635,
    "function": "GlobalContext<'a, 'hooks>::log_stx_transfer",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 358,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 130,
    "function": "build_ast_typical",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2532,
    "function": "make_keyword_reference",
    "return_type": "-> Option<KeywordAPI>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 653,
    "function": "<impl SequencedValue for ASCIIData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 96,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 40,
    "function": "update_expression_id",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1346,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 647,
    "function": "ClarityDatabase<'a>::load_contract_analysis",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 202,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/version.rs",
    "line": 24,
    "function": "ClarityVersion::latest",
    "return_type": "-> ClarityVersion",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 47,
    "function": "I128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 306,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 357,
    "function": "DefinitionSorter::probe_for_dependencies_in_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 299,
    "function": "SequenceData::replace_at",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from(Some(BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 395,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 165,
    "function": "ArithmeticOnlyChecker<'a>::try_native_function_check",
    "return_type": "-> Option<Result<(), Error>>",
    "replacement": "Some(Ok(()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/boolean.rs",
    "line": 58,
    "function": "special_and",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 828,
    "function": "make_for_simple_native",
    "return_type": "-> FunctionAPI",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 204,
    "function": "test_dynamic_dispatch_intra_contract_call",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 244,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 710,
    "function": "test_readwrite_dynamic_dispatch",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 642,
    "function": "special_delete_entry_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 411,
    "function": "evaluate_define",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1054,
    "function": "TypeSignature::least_supertype",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1047,
    "function": "ClarityDatabase<'a>::insert_microblock_poison",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/crypto.rs",
    "line": 102,
    "function": "special_principal_of",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 345,
    "function": "DefinitionSorter::probe_for_dependencies_in_list_of_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1072,
    "function": "ClarityDatabase<'a>::get_microblock_pubkey_hash_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 694,
    "function": "ClarityDatabase<'a>::insert_contract",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 926,
    "function": "ClarityDatabase<'a>::get_burnchain_block_header_hash_for_burnchain_height",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 326,
    "function": "Lexer<'a>::read_integer",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1928,
    "function": "ClarityDatabase<'a>::get_account_stx_balance",
    "return_type": "-> STXBalance",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 152,
    "function": "<impl CostTracker for ()>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 43,
    "function": "is_string_terminator",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from(vec![1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 800,
    "function": "<impl PartialEq for TupleData>::eq",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 524,
    "function": "TypeSignature::admits_type",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 69,
    "function": "doc_execute",
    "return_type": "-> Result<Option<Value>, vm::Error>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 135,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 751,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contracts.rs",
    "line": 44,
    "function": "Contract::initialize_from_ast",
    "return_type": "-> Result<Contract>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::new(Some(BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 905,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::compute_cost",
    "return_type": "-> std::result::Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 1, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 88,
    "function": "ContractContext::get_nft_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 171,
    "function": "ContractAnalysis::get_private_function",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 74,
    "function": "check_special_is_response",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 926,
    "function": "FunctionSignature::check_args_trait_compliance",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 108,
    "function": "get_lines_at",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/token.rs",
    "line": 47,
    "function": "<impl Display for Token>::fmt",
    "return_type": "-> std::fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/token.rs",
    "line": 82,
    "function": "Token::reproduce",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 259,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 429,
    "function": "TypeChecker<'a, 'b>::type_check_expects",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 818,
    "function": "STXBalance::debit_unlocked_amount",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1719,
    "function": "ClarityDatabase<'a>::get_ft_balance",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 571,
    "function": "clarity2_trait_check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 462,
    "function": "special_leq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 871,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::compute_cost",
    "return_type": "-> std::result::Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 677,
    "function": "LimitedCostTracker::new_mid_block",
    "return_type": "-> Result<LimitedCostTracker>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 42,
    "function": "<impl ClaritySerializable for String>::serialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 570,
    "function": "SymbolicExpression::match_list",
    "return_type": "-> Option<&[SymbolicExpression]>",
    "replacement": "Some(Vec::leak(Vec::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1913,
    "function": "LocalContext<'a>::lookup_callable_contract",
    "return_type": "-> Option<&CallableData>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 475,
    "function": "SymbolicExpression::cons",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 267,
    "function": "ArithmeticOnlyChecker<'a>::check_all",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 139,
    "function": "ContractAnalysis::add_private_function",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 172,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 229,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 211,
    "function": "<impl SymbolicExpressionCommon for SymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[SymbolicExpression]>",
    "replacement": "Some(Vec::leak(vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 557,
    "function": "native_sub",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 253,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1361,
    "function": "<impl Display for PrincipalData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 973,
    "function": "ClarityDatabase<'a>::get_miner_spend_total",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 405,
    "function": "special_geq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 721,
    "function": "TypeSignature::canonicalize",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 913,
    "function": "FunctionSignature::total_type_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 38,
    "function": "list_cons",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1451,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1825,
    "function": "ContractContext::lookup_trait_definition",
    "return_type": "-> Option<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([false])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 67,
    "function": "ContractAST::get_referenced_trait",
    "return_type": "-> Option<&TraitDefinition>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 532,
    "function": "special_less_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 389,
    "function": "Lexer<'a>::read_ascii_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 213,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1420,
    "function": "Environment<'a, 'b, 'hooks>::construct_print_transaction_event",
    "return_type": "-> StacksTransactionEvent",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::from(BTreeSet::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1153,
    "function": "<impl Write for WriteCounter>::write",
    "return_type": "-> std::io::Result<usize>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 78,
    "function": "Lexer<'a>::read_char",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from_iter([(Default::default(), vec![], false)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 223,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1963,
    "function": "test_let_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 228,
    "function": "check_special_let",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 463,
    "function": "Parser<'a>::open_tuple",
    "return_type": "-> ParseResult<SetupTupleResult>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 334,
    "function": "PreSymbolicExpression::placeholder",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1062,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 573,
    "function": "native_eq",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 111,
    "function": "Lexer<'a>::report_line_ending",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 486,
    "function": "TypeSignature::new_option",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 949,
    "function": "STXBalance::get_total_balance",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1385,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 829,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_read_only",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1406,
    "function": "<impl From for StacksAddress>::from",
    "return_type": "-> StacksAddress",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1209,
    "function": "Environment<'a, 'b, 'hooks>::execute_function_as_transaction",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 206,
    "function": "STXBurnEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 446,
    "function": "ClarityDatabase<'a>::roll_back",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 602,
    "function": "SymbolicExpression::match_trait_reference",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 716,
    "function": "OptionalData::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1782,
    "function": "TupleTypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 391,
    "function": "special_geq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 296,
    "function": "<impl DiagnosableError for ParseErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 237,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 454,
    "function": "ClarityDatabase<'a>::set_block_hash",
    "return_type": "-> Result<StacksBlockId>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 902,
    "function": "FixedFunction::total_type_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from_iter([\"xyzzy\".into()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 794,
    "function": "<impl PartialEq for ListData>::eq",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1595,
    "function": "GlobalContext<'a, 'hooks>::is_top_level",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 502,
    "function": "<impl Display for AssetMap>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 943,
    "function": "ClarityDatabase<'a>::get_burnchain_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 306,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 128,
    "function": "Lexer<'a>::skip_whitespace",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1748,
    "function": "TupleTypeSignature::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 217,
    "function": "check_special_try_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1346,
    "function": "test_return_trait_with_contract_of",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 338,
    "function": "RollbackWrapper<'a>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 299,
    "function": "check_special_burn_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 808,
    "function": "Value::some",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 168,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 36,
    "function": "<impl BuildASTPass for TraitsResolver>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1059,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 239,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_block_at_height",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 91,
    "function": "get_principal_as_principal_data",
    "return_type": "-> PrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 99,
    "function": "test_get_block_info_eval",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 298,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 114,
    "function": "<impl PartialEq for IncomparableError<T>>::eq",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1372,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1735,
    "function": "ListTypeData::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 253,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 421,
    "function": "Graph::get_node_descendants",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 0, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 363,
    "function": "RollbackWrapper<'a>::get",
    "return_type": "-> Option<T>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 737,
    "function": "ClarityDatabase<'a>::get_total_liquid_ustx",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 243,
    "function": "RollbackWrapper<'a>::rollback",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 106,
    "function": "native_buff_to_int_be::convert_to_int_be",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 67,
    "function": "ContractAST::get_referenced_trait",
    "return_type": "-> Option<&TraitDefinition>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::new(vec![1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 305,
    "function": "special_mint_token",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 606,
    "function": "special_print",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 163,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 307,
    "function": "DefinitionSorter::probe_for_dependencies_in_tuple",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 177,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 332,
    "function": "ContractContext::into_contract_analysis",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1044,
    "function": "Environment<'a, 'b, 'hooks>::eval_raw_with_rules",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/sequences.rs",
    "line": 1160,
    "function": "test_construct_bad_list",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 234,
    "function": "<impl ClarityDeserializable for STXBalance>::deserialize",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 163,
    "function": "<impl Error for RuntimeErrorType>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 291,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 56,
    "function": "SugarExpander::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 782,
    "function": "ClarityDatabase<'a>::is_in_regtest",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 685,
    "function": "TypedNativeFunction::type_check_application",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1874,
    "function": "ClarityDatabase<'a>::make_key_for_account_balance",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1372,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 223,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 476,
    "function": "special_greater_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 182,
    "function": "ReadOnlyChecker<'a, 'b>::check_reads_only_valid",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 261,
    "function": "RollbackWrapper<'a>::depth",
    "return_type": "-> usize",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 626,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::from_iter([(Default::default(), (Default::default(), Default::default()))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 274,
    "function": "SequenceData::is_empty",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 386,
    "function": "STXBalanceSnapshot<'db, 'conn>::has_unlockable_tokens",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 341,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2626,
    "function": "make_json_api_reference",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 84,
    "function": "AnalysisDatabase<'a>::has_contract",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 48,
    "function": "<impl BuildASTPass for StackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 943,
    "function": "ClarityDatabase<'a>::get_burnchain_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 146,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 639,
    "function": "native_to_int",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 236,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1213,
    "function": "ClarityDatabase<'a>::lookup_variable",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 391,
    "function": "special_geq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from((Default::default(), BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 182,
    "function": "ReadOnlyChecker<'a, 'b>::check_reads_only_valid",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 246,
    "function": "Lexer<'a>::read_trait_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 458,
    "function": "test_simple_naming_system",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 521,
    "function": "Parser<'a>::read_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 55,
    "function": "TraitChecker::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 554,
    "function": "native_add",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 359,
    "function": "check_contract_call",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 65,
    "function": "symbols_from_values",
    "return_type": "-> Vec<SymbolicExpression>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 389,
    "function": "Lexer<'a>::read_ascii_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 820,
    "function": "LimitedCostTracker::get_limit",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 579,
    "function": "native_bitwise_left_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 329,
    "function": "<impl From for TypeSignature>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 195,
    "function": "check_special_get_token_supply",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 179,
    "function": "ContractAnalysis::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 202,
    "function": "TraitIdentifier::parse",
    "return_type": "-> Result<(Option<StandardPrincipalData>, ContractName, ClarityName)>",
    "replacement": "Ok((None, Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 182,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1183,
    "function": "Value::serialize_to_hex",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 448,
    "function": "special_leq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 521,
    "function": "test_simple_token_system",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 316,
    "function": "ContractContext::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 233,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 84,
    "function": "ContractContext::ft_exists",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 147,
    "function": "TopLevelMemoryEnvironmentGenerator::get_env",
    "return_type": "-> OwnedEnvironment",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1559,
    "function": "byte_len_of_serialization",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 532,
    "function": "special_less_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 128,
    "function": "SequenceSubtype::unit_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1072,
    "function": "ClarityDatabase<'a>::get_microblock_pubkey_hash_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 511,
    "function": "SymbolicExpression::span",
    "return_type": "-> &Span",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 111,
    "function": "Lexer<'a>::report_line_ending",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 377,
    "function": "native_bitwise_or",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 852,
    "function": "OwnedEnvironment<'a, 'hooks>::destruct",
    "return_type": "-> Option<(ClarityDatabase<'a>, LimitedCostTracker)>",
    "replacement": "Some((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 156,
    "function": "FunctionType::check_args_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 181,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 227,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1301,
    "function": "PrincipalData::version",
    "return_type": "-> u8",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 295,
    "function": "test_tx_sponsor",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 832,
    "function": "ClarityDatabase<'a>::get_current_burnchain_block_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1017,
    "function": "Value::serialize_write",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 563,
    "function": "native_div",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 197,
    "function": "NativeFunctions::lookup_by_name_at_version",
    "return_type": "-> Option<NativeFunctions>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from_iter([Some(BTreeMap::from_iter([(Default::default(), Default::default())]))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 227,
    "function": "is_okay",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 103,
    "function": "build_ast_with_rules",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 221,
    "function": "add_stack_trace",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 490,
    "function": "special_greater_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::new(true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 174,
    "function": "RollbackWrapperPersistedLog::nest",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1044,
    "function": "Value::expect_i128",
    "return_type": "-> i128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1229,
    "function": "TypeChecker<'a, 'b>::clarity1_type_check_expects",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 391,
    "function": "special_geq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 415,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 464,
    "function": "ListTypeData::destruct",
    "return_type": "-> (TypeSignature, u32)",
    "replacement": "(Default::default(), 0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 86,
    "function": "TraitContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(Some(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 572,
    "function": "native_log2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1317,
    "function": "ClarityDatabase<'a>::fetch_entry_unknown_descriptor",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1139,
    "function": "Value::serialized_size",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1186,
    "function": "ExecutionCost::runtime",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 384,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 77,
    "function": "check_special_is_response",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 190,
    "function": "ContractContext::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 55,
    "function": "TraitChecker::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 388,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::new(vec![0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 586,
    "function": "SymbolicExpression::match_atom_value",
    "return_type": "-> Option<&Value>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 57,
    "function": "TypeMap::set_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 274,
    "function": "SequenceData::is_empty",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 423,
    "function": "SequenceData::filter",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 309,
    "function": "build_ast",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 408,
    "function": "AssetMap::to_table",
    "return_type": "-> HashMap<PrincipalData, HashMap<AssetIdentifier, AssetMapEntry>>",
    "replacement": "HashMap::from_iter([(Default::default(), HashMap::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 680,
    "function": "<impl SequencedValue for UTF8Data>::drained_items",
    "return_type": "-> Vec<Vec<u8>>",
    "replacement": "vec![vec![0]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 405,
    "function": "special_geq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 319,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_open_chain_tip_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 512,
    "function": "check_get_block_info",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 476,
    "function": "ClarityDatabase<'a>::put_value",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 348,
    "function": "DeserializeStackItem::next_expected_type",
    "return_type": "-> Result<Option<TypeSignature>, SerializationError>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 236,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 248,
    "function": "<impl From for CheckErrors>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 182,
    "function": "TraitsResolver::try_parse_pre_expr",
    "return_type": "-> Option<(DefineFunctions, Vec<&'a PreSymbolicExpression>)>",
    "replacement": "Some((Default::default(), vec![&Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new((Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 155,
    "function": "STXTransferEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 256,
    "function": "SequenceData::element_size",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 546,
    "function": "special_less",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 123,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 237,
    "function": "<impl EvalHook for CoverageReporter>::will_begin_eval",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 253,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1722,
    "function": "ListTypeData::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 233,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 302,
    "function": "AssetMap::add_stx_burn",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 347,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 119,
    "function": "Parser<'a>::add_diagnostic",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 815,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_read_only_with_rules",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 657,
    "function": "<impl SequencedValue for ASCIIData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1115,
    "function": "map_no_contract_as_none",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 123,
    "function": "AnalysisDatabase<'a>::insert_contract",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 266,
    "function": "ContractInterfaceFunction::from_map",
    "return_type": "-> Vec<ContractInterfaceFunction>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 110,
    "function": "<impl From for PrincipalData>::from",
    "return_type": "-> PrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 230,
    "function": "<impl Display for CheckError>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1696,
    "function": "TypeSignature::inner_type_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1903,
    "function": "LocalContext<'a>::lookup_variable",
    "return_type": "-> Option<&Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 153,
    "function": "SqliteConnection::has_entry",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 187,
    "function": "SqliteConnection::open",
    "return_type": "-> Result<Connection>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 489,
    "function": "check_secp256k1_recover",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 826,
    "function": "LimitedCostTracker::get_memory",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 119,
    "function": "Parser<'a>::add_diagnostic",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 926,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 550,
    "function": "ClarityDatabase<'a>::make_key_for_quad",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 2024,
    "function": "test_let3_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 331,
    "function": "DefinedFunction::is_read_only",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1244,
    "function": "<impl Display for OptionalData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 433,
    "function": "RollbackWrapper<'a>::prepare_for_contract_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 766,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 979,
    "function": "STXBalance::was_locked_by_v3",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 326,
    "function": "<impl HeadersDB for NullHeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 50,
    "function": "TraitContext::is_name_used",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 243,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_open_chain_tip",
    "return_type": "-> StacksBlockId",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 87,
    "function": "ast_check_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1421,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 333,
    "function": "special_set_variable_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 779,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 169,
    "function": "<impl StacksAddressExtensions for StacksAddress>::to_account_principal",
    "return_type": "-> PrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 45,
    "function": "FunctionType::check_args",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 415,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/crypto.rs",
    "line": 139,
    "function": "special_secp256k1_recover",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1153,
    "function": "<impl Write for WriteCounter>::write",
    "return_type": "-> std::io::Result<usize>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 51,
    "function": "ExpressionIdentifier::run_pre_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 151,
    "function": "<impl Display for RuntimeErrorType>::fmt",
    "return_type": "-> std::fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 296,
    "function": "<impl DiagnosableError for ParseErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 1, 0)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 578,
    "function": "STXBalanceSnapshot<'db, 'conn>::lock_tokens_v3",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 55,
    "function": "TraitChecker::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 929,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 837,
    "function": "OwnedEnvironment<'a, 'hooks>::commit",
    "return_type": "-> Result<(AssetMap, EventBatch)>",
    "replacement": "Ok((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 705,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_versioned_contract",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 123,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 163,
    "function": "<impl Error for RuntimeErrorType>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 123,
    "function": "AnalysisDatabase<'a>::insert_contract",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1167,
    "function": "TypeSignature::least_supertype_v2_1",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 171,
    "function": "ContractAnalysis::get_private_function",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 0, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 566,
    "function": "native_pow",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 233,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 369,
    "function": "native_bitwise_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 247,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 380,
    "function": "PreSymbolicExpression::match_field_identifier",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 676,
    "function": "<impl SequencedValue for UTF8Data>::items",
    "return_type": "-> &Vec<Vec<u8>>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 217,
    "function": "NullBackingStore::as_analysis_db",
    "return_type": "-> AnalysisDatabase",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 28,
    "function": "build_contract_interface",
    "return_type": "-> ContractInterface",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 152,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 77,
    "function": "SqliteConnection::put",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 288,
    "function": "build_ast_precheck_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 162,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 116,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 288,
    "function": "Lexer<'a>::read_principal",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 221,
    "function": "check_special_let",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 452,
    "function": "test_dynamic_dispatch_including_nested_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 67,
    "function": "<impl DiagnosableError for LexerError>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 345,
    "function": "Lexer<'a>::read_hex",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(Some(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 295,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 345,
    "function": "Lexer<'a>::read_hex",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 336,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 848,
    "function": "TupleTypeSignature::len",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 255,
    "function": "check_special_unwrap",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 136,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 181,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 45,
    "function": "FunctionType::check_args",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 394,
    "function": "FunctionIdentifier::new_user_function",
    "return_type": "-> FunctionIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 59,
    "function": "AssetIdentifier::STX_burned",
    "return_type": "-> AssetIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 580,
    "function": "ClarityDatabase<'a>::get_contract_src",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 892,
    "function": "TypeChecker<'a, 'b>::into_contract_analysis",
    "return_type": "-> LimitedCostTracker",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 395,
    "function": "load_cost_functions",
    "return_type": "-> Result<CostStateSummary>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 205,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 208,
    "function": "CheckError::has_expression",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 64,
    "function": "check_special_list_cons",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1487,
    "function": "TupleData::from_data",
    "return_type": "-> Result<TupleData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 629,
    "function": "native_to_uint",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 429,
    "function": "Graph::nodes_count",
    "return_type": "-> usize",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 190,
    "function": "ContractContext::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 243,
    "function": "FunctionArgSignature::canonicalize",
    "return_type": "-> FunctionArgSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 629,
    "function": "native_to_uint",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 141,
    "function": "check_special_get",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1374,
    "function": "<impl Display for CallableData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 499,
    "function": "special_transfer_asset_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 807,
    "function": "LimitedCostTracker::get_total",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 615,
    "function": "<impl SequencedValue for ListData>::items",
    "return_type": "-> &Vec<Value>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 926,
    "function": "ClarityDatabase<'a>::get_burnchain_block_header_hash_for_burnchain_height",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 130,
    "function": "build_ast_typical",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/maps.rs",
    "line": 153,
    "function": "check_special_set_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 320,
    "function": "ContractContext::get_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 555,
    "function": "special_insert_entry_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1483,
    "function": "TupleData::is_empty",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 929,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 481,
    "function": "execute_on_network",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 583,
    "function": "OwnedEnvironment<'a, 'hooks>::new_max_limit",
    "return_type": "-> OwnedEnvironment<'a, '_>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 41,
    "function": "AnalysisDatabase<'a>::new_with_rollback_wrapper",
    "return_type": "-> AnalysisDatabase<'a>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 448,
    "function": "special_leq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1169,
    "function": "<impl Write for WriteCounter>::flush",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![Default::default()], vec![Default::default()], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([Some(\"xyzzy\".into())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 853,
    "function": "ClarityDatabase<'a>::get_block_header_hash",
    "return_type": "-> BlockHeaderHash",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1171,
    "function": "TypeChecker<'a, 'b>::type_check_function_application",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 160,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1943,
    "function": "CallStack::contains",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 488,
    "function": "GraphWalker::get_cycling_dependencies",
    "return_type": "-> Option<Vec<usize>>",
    "replacement": "Some(vec![0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1735,
    "function": "ListTypeData::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 545,
    "function": "execute_against_version",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 348,
    "function": "PreSymbolicExpression::match_trait_reference",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 915,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 858,
    "function": "Value::error",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1141,
    "function": "ClarityDatabase<'a>::load_variable",
    "return_type": "-> Result<DataVariableMetadata>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 288,
    "function": "Lexer<'a>::read_principal",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 306,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 136,
    "function": "<impl StacksMessageCodec for ContractName>::consensus_deserialize",
    "return_type": "-> Result<ContractName, codec_error>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::from((Default::default(), true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 43,
    "function": "is_string_terminator",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 125,
    "function": "<impl Display for QualifiedContractIdentifier>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 802,
    "function": "ClarityDatabase<'a>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1485,
    "function": "ClarityDatabase<'a>::data_map_entry_exists",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 314,
    "function": "<impl HeadersDB for NullHeadersDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1816,
    "function": "test_pass_embedded_trait_to_subtrait_list_option",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1693,
    "function": "ClarityDatabase<'a>::checked_decrease_token_supply",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 90,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 42,
    "function": "<impl ClaritySerializable for String>::serialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 234,
    "function": "native_is_some",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1099,
    "function": "<impl FromSql for ExecutionCost>::column_result",
    "return_type": "-> FromSqlResult<ExecutionCost>",
    "replacement": "FromSqlResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 391,
    "function": "special_geq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 173,
    "function": "<impl DiagnosableError for ParseErrors>::message",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 419,
    "function": "special_geq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 251,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 71,
    "function": "is_committed",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 271,
    "function": "AssetMap::get_next_stx_burn_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 202,
    "function": "special_match",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 396,
    "function": "PreSymbolicExpression::match_comment",
    "return_type": "-> Option<&str>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 778,
    "function": "ClarityDatabase<'a>::destroy",
    "return_type": "-> RollbackWrapper<'a>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 59,
    "function": "<impl AnalysisPass for ReadOnlyChecker<'a, 'b>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1312,
    "function": "TypeSignature::type_of",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from(Some(()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 1109,
    "function": "STXBalance::can_transfer_at_burn_block",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 243,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1533,
    "function": "TupleData::shallow_merge",
    "return_type": "-> Result<TupleData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 47,
    "function": "version_matches_current_network",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/maps.rs",
    "line": 73,
    "function": "check_special_delete_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 190,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 422,
    "function": "check_special_slice",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 323,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 213,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1988,
    "function": "CallStack::make_stack_trace",
    "return_type": "-> StackTrace",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 63,
    "function": "lookup_reserved_variable",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 533,
    "function": "ClarityDatabase<'a>::make_key_for_trip",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 69,
    "function": "AssetIdentifier::sugared",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 415,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 296,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 676,
    "function": "<impl SequencedValue for UTF8Data>::items",
    "return_type": "-> &Vec<Vec<u8>>",
    "replacement": "&vec![vec![1]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 165,
    "function": "inner_unwrap_err",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 311,
    "function": "Lexer<'a>::read_unsigned",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 486,
    "function": "ClarityDatabase<'a>::put_value_with_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 657,
    "function": "<impl SequencedValue for ASCIIData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1903,
    "function": "LocalContext<'a>::lookup_variable",
    "return_type": "-> Option<&Value>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 586,
    "function": "SymbolicExpression::match_atom_value",
    "return_type": "-> Option<&Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 288,
    "function": "Lexer<'a>::read_principal",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 837,
    "function": "STXBalance::checked_add_unlocked_amount",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 170,
    "function": "ContractInterfaceAtomType::vec_from_tuple_type",
    "return_type": "-> Vec<ContractInterfaceTupleEntryType>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 118,
    "function": "check_special_filter",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 626,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1099,
    "function": "<impl FromSql for ExecutionCost>::column_result",
    "return_type": "-> FromSqlResult<ExecutionCost>",
    "replacement": "FromSqlResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 277,
    "function": "DefineFunctions::try_parse",
    "return_type": "-> Option<(DefineFunctions, &[SymbolicExpression])>",
    "replacement": "Some((Default::default(), Vec::leak(vec![Default::default()])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from_iter([1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 458,
    "function": "ClarityDatabase<'a>::put",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 295,
    "function": "<impl StacksMessageCodec for PrincipalData>::consensus_deserialize",
    "return_type": "-> Result<PrincipalData, codec_error>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 250,
    "function": "native_okay",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 149,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 128,
    "function": "Lexer<'a>::skip_whitespace",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 292,
    "function": "check_special_set_var",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1156,
    "function": "TypeChecker<'a, 'b>::try_native_function_check",
    "return_type": "-> Option<TypeResult>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 243,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/crypto.rs",
    "line": 181,
    "function": "special_secp256k1_verify",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 929,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 740,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 972,
    "function": "TypeSignature::min_string_utf8",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 259,
    "function": "LimitedCostTracker::contract_call_circuits",
    "return_type": "-> HashMap<(QualifiedContractIdentifier, ClarityName), ClarityCostFunctionReference>",
    "replacement": "HashMap::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 461,
    "function": "AssetMap::get_stx_burned",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 535,
    "function": "TypeChecker<'a, 'b>::get_function_type",
    "return_type": "-> Option<FunctionType>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 452,
    "function": "check_contract_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([\"xyzzy\".into()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 162,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1714,
    "function": "GlobalContext<'a, 'hooks>::commit",
    "return_type": "-> Result<(Option<AssetMap>, Option<EventBatch>)>",
    "replacement": "Ok((Some(Default::default()), Some(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 388,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 537,
    "function": "ClarityDatabase<'a>::make_metadata_key",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 136,
    "function": "CostSynthesis::from_cost_tracker",
    "return_type": "-> CostSynthesis",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 267,
    "function": "check_special_unwrap_err",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1652,
    "function": "TypeSignature::size",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 661,
    "function": "<impl SequencedValue for ASCIIData>::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 659,
    "function": "ClarityDatabase<'a>::get_contract_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 373,
    "function": "native_bitwise_and",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 364,
    "function": "native_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 228,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 210,
    "function": "Lexer<'a>::read_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 57,
    "function": "TypeMap::set_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 633,
    "function": "<impl SequencedValue for BuffData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 913,
    "function": "FunctionSignature::total_type_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1862,
    "function": "<impl Debug for TupleTypeSignature>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 307,
    "function": "DefinitionSorter::probe_for_dependencies_in_tuple",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 538,
    "function": "TypedNativeFunction::type_check_application",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/principals.rs",
    "line": 138,
    "function": "test_simple_is_standard_mainnet_cases",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 333,
    "function": "AssetMap::add_token_transfer",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 34,
    "function": "version_matches_mainnet",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1782,
    "function": "TupleTypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 114,
    "function": "ContractAnalysis::add_map_type",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 279,
    "function": "ContractContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 402,
    "function": "RollbackWrapper<'a>::get_value",
    "return_type": "-> Result<Option<ValueResult>, SerializationError>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 261,
    "function": "RollbackWrapper<'a>::depth",
    "return_type": "-> usize",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 221,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 212,
    "function": "CheckError::set_expression",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 146,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 175,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 216,
    "function": "<impl From for Value>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 779,
    "function": "get_output_type_string",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 246,
    "function": "Lexer<'a>::read_trait_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 304,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 118,
    "function": "check_special_filter",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 311,
    "function": "Lexer<'a>::read_unsigned",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 178,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 163,
    "function": "<impl ClaritySerializable for STXBalance>::serialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/boolean.rs",
    "line": 74,
    "function": "native_not",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1874,
    "function": "ClarityDatabase<'a>::make_key_for_account_balance",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 190,
    "function": "ContractAnalysis::get_defined_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 308,
    "function": "ContractContext::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1175,
    "function": "Value::serialize_to_vec",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 152,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 167,
    "function": "check_special_merge",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 243,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 122,
    "function": "run_analysis",
    "return_type": "-> Result<ContractAnalysis, (CheckError, LimitedCostTracker)>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 62,
    "function": "get_constant_value",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 86,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::compute_cost",
    "return_type": "-> Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 99,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 457,
    "function": "AssetMap::get_stx",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1232,
    "function": "test_return_trait_with_contract_of_wrapped_in_begin",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 264,
    "function": "check_special_append",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 735,
    "function": "TrackerData::load_costs",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(Some(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 569,
    "function": "native_sqrti",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 128,
    "function": "native_string_to_int_generic",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 415,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 198,
    "function": "ContractContext::get_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 259,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 962,
    "function": "TypeSignature::min_buffer",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1283,
    "function": "TypeChecker<'a, 'b>::clarity2_type_check_expects",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 337,
    "function": "STXBalanceSnapshot<'db, 'conn>::transfer_to",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 106,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 287,
    "function": "check_arguments_at_least",
    "return_type": "-> Result<(), CheckErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 405,
    "function": "special_geq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 263,
    "function": "handle_use_trait",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 238,
    "function": "native_is_none",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 78,
    "function": "Lexer<'a>::read_char",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/maps.rs",
    "line": 34,
    "function": "check_special_fetch_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1872,
    "function": "<impl Display for AssetIdentifier>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 137,
    "function": "AnalysisDatabase<'a>::get_clarity_version",
    "return_type": "-> CheckResult<ClarityVersion>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 170,
    "function": "ContractInterfaceAtomType::vec_from_tuple_type",
    "return_type": "-> Vec<ContractInterfaceTupleEntryType>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 395,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 129,
    "function": "<impl Display for ParseError>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/crypto.rs",
    "line": 83,
    "function": "pubkey_to_address_v2",
    "return_type": "-> StacksAddress",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 120,
    "function": "<impl PartialEq for Error>::eq",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 137,
    "function": "MemoryEnvironmentGenerator::get_env",
    "return_type": "-> OwnedEnvironment",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 358,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 742,
    "function": "BlockInfoProperty::type_result",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 511,
    "function": "TypeSignature::is_response_type",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1120,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_sub",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1135,
    "function": "Value::expect_result",
    "return_type": "-> std::result::Result<Value, Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1136,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 676,
    "function": "<impl SequencedValue for UTF8Data>::items",
    "return_type": "-> &Vec<Vec<u8>>",
    "replacement": "&vec![vec![0]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 845,
    "function": "OwnedEnvironment<'a, 'hooks>::get_cost_total",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 59,
    "function": "UTF8Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 88,
    "function": "ReadOnlyChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 962,
    "function": "ClarityDatabase<'a>::get_miner_spend_winner",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 182,
    "function": "TraitsResolver::try_parse_pre_expr",
    "return_type": "-> Option<(DefineFunctions, Vec<&'a PreSymbolicExpression>)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 113,
    "function": "ParseError::has_pre_expression",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 988,
    "function": "STXBalance::has_locked_tokens_at_burn_block",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 74,
    "function": "<impl BuildASTPass for VaryStackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 503,
    "function": "SymbolicExpression::copy_span",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 48,
    "function": "TraitsResolver::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 88,
    "function": "is_err_code_i128",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 513,
    "function": "execute_with_parameters",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 97,
    "function": "native_buff_to_uint_le::convert_to_uint_le",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 220,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([Some(String::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1825,
    "function": "ContractContext::lookup_trait_definition",
    "return_type": "-> Option<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 295,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 910,
    "function": "Value::cons_list_unsanitized",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1341,
    "function": "StandardPrincipalData::to_address",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 229,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 59,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![(Default::default(), String::new())]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from((Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1031,
    "function": "ClarityDatabase<'a>::insert_microblock_pubkey_hash_height",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 579,
    "function": "native_bitwise_left_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 115,
    "function": "DefinitionSorter::probe_for_dependencies",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![Default::default()], vec![Default::default()], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from(Some(BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 594,
    "function": "SymbolicExpression::match_literal_value",
    "return_type": "-> Option<&Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 373,
    "function": "native_bitwise_and",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1943,
    "function": "CallStack::contains",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1044,
    "function": "TypeChecker<'a, 'b>::get_function_type",
    "return_type": "-> Option<FunctionType>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 712,
    "function": "LimitedCostTracker::new_free",
    "return_type": "-> LimitedCostTracker",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 751,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1782,
    "function": "TupleTypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 104,
    "function": "CoverageReporter::executable_lines",
    "return_type": "-> Vec<u32>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 48,
    "function": "<impl ClarityDeserializable for String>::deserialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 590,
    "function": "special_transfer_asset_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 230,
    "function": "handle_define_map",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 84,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1233,
    "function": "UTF8Data::append",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1357,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1238,
    "function": "UTF8Data::len",
    "return_type": "-> BufferLength",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 187,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 463,
    "function": "ClarityDatabase<'a>::put_with_size",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 135,
    "function": "check_special_transfer_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1201,
    "function": "ListData::is_empty",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 627,
    "function": "<impl SequencedValue for ListData>::to_value",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 61,
    "function": "check_special_get_balance",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 77,
    "function": "check_special_mint_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 70,
    "function": "runtime_cost",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 278,
    "function": "eval_with_new_binding",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 716,
    "function": "LimitedCostTracker::default_cost_contract_for_epoch",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 66,
    "function": "native_unwrap_or_ret",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::from(Ok(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 298,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 28,
    "function": "check",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 425,
    "function": "RollbackWrapper<'a>::get_block_header_hash",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::from_iter([Ok(String::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 537,
    "function": "ClarityDatabase<'a>::make_metadata_key",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1165,
    "function": "test_contract_of_no_impl",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 175,
    "function": "ContractAnalysis::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "Some(&(Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1388,
    "function": "TypeSignature::parse_list_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 358,
    "function": "store_state_summary",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2419,
    "function": "make_api_reference",
    "return_type": "-> FunctionAPI",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 571,
    "function": "clarity2_trait_check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 390,
    "function": "test_dynamic_dispatch_by_importing_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 563,
    "function": "native_div",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 939,
    "function": "FunctionSignature::canonicalize",
    "return_type": "-> FunctionSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 974,
    "function": "Environment<'a, 'b, 'hooks>::nest_with_caller",
    "return_type": "-> Environment<'c, 'b, 'hooks>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contracts.rs",
    "line": 57,
    "function": "Contract::canonicalize_types",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 186,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 202,
    "function": "check_special_unwrap_err_or_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 692,
    "function": "parse_eval_bindings",
    "return_type": "-> Result<Vec<(ClarityName, Value)>>",
    "replacement": "Ok(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 479,
    "function": "AssetMap::get_fungible_tokens",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 214,
    "function": "check_special_try_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 793,
    "function": "ClarityDatabase<'a>::get_index_block_header_hash",
    "return_type": "-> StacksBlockId",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1385,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 335,
    "function": "DefinedFunction::apply",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 309,
    "function": "build_ast",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 685,
    "function": "test_simple_contract_call",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 372,
    "function": "PreSymbolicExpression::match_list",
    "return_type": "-> Option<&[PreSymbolicExpression]>",
    "replacement": "Some(Vec::leak(vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 199,
    "function": "check_special_unwrap_err_or_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 369,
    "function": "DefinitionSorter::probe_for_dependencies_in_key_value_pair",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 247,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 223,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 77,
    "function": "rollback_value_check",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1507,
    "function": "TupleData::from_data_typed",
    "return_type": "-> Result<TupleData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::from_iter([Ok(\"xyzzy\".into())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from_iter([1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1813,
    "function": "ClarityDatabase<'a>::get_nft_key_type",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 106,
    "function": "AnalysisDatabase<'a>::load_contract",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 41,
    "function": "U128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 145,
    "function": "FunctionType::check_args_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1186,
    "function": "BuffData::append",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 247,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_open_chain_tip_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 203,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 388,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 578,
    "function": "SymbolicExpression::match_atom",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 40,
    "function": "<impl BuildASTPass for SugarExpander>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 88,
    "function": "ReadOnlyChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 323,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 102,
    "function": "TraitContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 401,
    "function": "<impl TryFrom for StringUTF8Length>::try_from",
    "return_type": "-> Result<StringUTF8Length>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 353,
    "function": "is_reserved",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 50,
    "function": "sqlite_get",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 532,
    "function": "RollbackWrapper<'a>::has_metadata_entry",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 338,
    "function": "RollbackWrapper<'a>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 402,
    "function": "RollbackWrapper<'a>::get_value",
    "return_type": "-> Result<Option<ValueResult>, SerializationError>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::new(BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 327,
    "function": "PreSymbolicExpression::tuple",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 767,
    "function": "STXBalance::effective_unlock_height",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 637,
    "function": "check_get_block_info",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 229,
    "function": "RollbackWrapper<'a>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1035,
    "function": "Value::expect_u128",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1198,
    "function": "TypeChecker<'a, 'b>::lookup_variable",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 298,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 345,
    "function": "Lexer<'a>::read_hex",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 525,
    "function": "clarity2_check_functions_compatible",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 296,
    "function": "check_special_as_max_len",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 252,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 633,
    "function": "<impl SequencedValue for BuffData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 867,
    "function": "ClarityDatabase<'a>::get_burnchain_block_header_hash",
    "return_type": "-> BurnchainHeaderHash",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 316,
    "function": "ContractContext::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 303,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_side_store",
    "return_type": "-> &Connection",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 123,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 160,
    "function": "<impl From for TypePrefix>::from",
    "return_type": "-> TypePrefix",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1637,
    "function": "ClarityDatabase<'a>::create_non_fungible_token",
    "return_type": "-> NonFungibleTokenMetadata",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 121,
    "function": "<impl StacksMessageCodec for ContractName>::consensus_serialize",
    "return_type": "-> Result<(), codec_error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 195,
    "function": "ContractContext::get_nft_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 504,
    "function": "special_greater",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 188,
    "function": "special_principal_construct",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 431,
    "function": "ClarityDatabase<'a>::is_stack_empty",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 594,
    "function": "SymbolicExpression::match_literal_value",
    "return_type": "-> Option<&Value>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 307,
    "function": "ContractInterfaceFungibleTokens::from_set",
    "return_type": "-> Vec<Self>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 779,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 893,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1357,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 845,
    "function": "Value::okay",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 255,
    "function": "<impl ClarityBackingStore for NullBackingStore>::put_all",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 55,
    "function": "ContractAST::pre_expressions_drain",
    "return_type": "-> PreExpressionsDrain",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 232,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 955,
    "function": "Value::string_ascii_from_bytes",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 345,
    "function": "DefinitionSorter::probe_for_dependencies_in_list_of_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 326,
    "function": "<impl HeadersDB for NullHeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 167,
    "function": "Parser<'a>::skip_to_end",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 71,
    "function": "is_committed",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 463,
    "function": "STXBalanceSnapshot<'db, 'conn>::is_v2_locked",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 943,
    "function": "ClarityDatabase<'a>::get_burnchain_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 525,
    "function": "clarity2_check_functions_compatible",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::new((Default::default(), true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 615,
    "function": "<impl SequencedValue for ListData>::items",
    "return_type": "-> &Vec<Value>",
    "replacement": "&vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 335,
    "function": "<impl From for TypeSignature>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 195,
    "function": "TraitIdentifier::parse_sugared_syntax",
    "return_type": "-> Result<(ContractName, ClarityName)>",
    "replacement": "Ok((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 992,
    "function": "test_at_unknown_block",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 57,
    "function": "check_special_list_cons",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 86,
    "function": "TraitContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 619,
    "function": "<impl SequencedValue for ListData>::drained_items",
    "return_type": "-> Vec<Value>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 236,
    "function": "ContractInterfaceFunctionArg::from_function_args",
    "return_type": "-> Vec<ContractInterfaceFunctionArg>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 104,
    "function": "CoverageReporter::executable_lines",
    "return_type": "-> Vec<u32>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 118,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 50,
    "function": "TraitContext::is_name_used",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1044,
    "function": "TypeChecker<'a, 'b>::get_function_type",
    "return_type": "-> Option<FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 516,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 102,
    "function": "<impl Error for SerializationError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 81,
    "function": "<impl StacksMessageCodec for ClarityName>::consensus_serialize",
    "return_type": "-> Result<(), codec_error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 40,
    "function": "update_expression_id",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 200,
    "function": "check_special_stx_transfer",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1431,
    "function": "TypeSignature::parse_string_utf8_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 546,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1951,
    "function": "ClarityDatabase<'a>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 354,
    "function": "RollbackWrapper<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 230,
    "function": "ContractAnalysis::check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 141,
    "function": "<impl Error for ParseError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 740,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 204,
    "function": "<impl ClarityValueSerializable for StandardPrincipalData>::serialize_write",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/maps.rs",
    "line": 33,
    "function": "check_special_fetch_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 263,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 338,
    "function": "RollbackWrapper<'a>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/diagnostic.rs",
    "line": 47,
    "function": "Diagnostic::err",
    "return_type": "-> Diagnostic",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1154,
    "function": "ClarityDatabase<'a>::set_variable_unknown_descriptor",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 227,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 518,
    "function": "special_less_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 166,
    "function": "special_stx_transfer",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 57,
    "function": "TypeMap::set_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 228,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 246,
    "function": "Lexer<'a>::read_trait_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 887,
    "function": "TupleTypeSignature::parse_name_type_pair_list",
    "return_type": "-> Result<TupleTypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 384,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 114,
    "function": "<impl PartialEq for IncomparableError<T>>::eq",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 820,
    "function": "Value::none",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 89,
    "function": "test_dynamic_dispatch_pass_trait_nested_in_let",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1669,
    "function": "GlobalContext<'a, 'hooks>::special_cc_handler_execute_read_only",
    "return_type": "-> std::result::Result<A, E>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1456,
    "function": "<impl From for ASCIIData>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1651,
    "function": "ClarityDatabase<'a>::load_nft",
    "return_type": "-> Result<NonFungibleTokenMetadata>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 370,
    "function": "DefinedFunction::get_span",
    "return_type": "-> Span",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 682,
    "function": "special_delete_entry_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 785,
    "function": "special_contract_of",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 93,
    "function": "AnalysisDatabase<'a>::load_contract_non_canonical",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1118,
    "function": "Environment<'a, 'b, 'hooks>::execute_contract_allow_private",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 177,
    "function": "make_contract_hash_key",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 728,
    "function": "get_input_type_string",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 233,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 899,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 188,
    "function": "Parser<'a>::ignore_whitespace_and_comments",
    "return_type": "-> Vec<PreSymbolicExpression>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 110,
    "function": "check_special_default_to",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from_iter([vec![1]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 130,
    "function": "build_ast_typical",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 264,
    "function": "check_special_unwrap_err",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1507,
    "function": "Environment<'a, 'b, 'hooks>::register_nft_burn_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 768,
    "function": "ClarityDatabase<'a>::decrement_ustx_liquid_supply",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1913,
    "function": "LocalContext<'a>::lookup_callable_contract",
    "return_type": "-> Option<&CallableData>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/tuples.rs",
    "line": 47,
    "function": "tuple_get",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 247,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 89,
    "function": "native_buff_to_int_le::convert_to_int_le",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 326,
    "function": "Lexer<'a>::read_integer",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 293,
    "function": "special_set_variable_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 379,
    "function": "DefinitionSorter::find_expression_definition",
    "return_type": "-> Option<(ClarityName, u64, &'b PreSymbolicExpression)>",
    "replacement": "Some((Default::default(), 1, &Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 680,
    "function": "STXBalanceSnapshot<'db, 'conn>::is_v3_locked",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 285,
    "function": "PreSymbolicExpression::sugared_field_identifier",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1485,
    "function": "ClarityDatabase<'a>::data_map_entry_exists",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 815,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_read_only_with_rules",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 205,
    "function": "native_int_to_ascii",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 592,
    "function": "ClarityDatabase<'a>::set_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 158,
    "function": "Parser<'a>::peek_last_token",
    "return_type": "-> ParseResult<&PlacedToken>",
    "replacement": "ParseResult::new(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 1, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 213,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 368,
    "function": "special_mint_asset_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 443,
    "function": "<impl DiagnosableError for CheckErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1882,
    "function": "LocalContext<'a>::function_context",
    "return_type": "-> &LocalContext",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 282,
    "function": "<impl Debug for LimitedCostTracker>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1268,
    "function": "<impl Debug for BuffData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 463,
    "function": "ClarityDatabase<'a>::put_with_size",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 108,
    "function": "get_lines_at",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 87,
    "function": "ast_check_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 388,
    "function": "PreSymbolicExpression::match_placeholder",
    "return_type": "-> Option<&str>",
    "replacement": "Some(\"xyzzy\")",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 247,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1080,
    "function": "Value::expect_buff_padded",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1356,
    "function": "TypeSignature::parent_list_type",
    "return_type": "-> std::result::Result<ListTypeData, CheckErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 359,
    "function": "special_slice",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1301,
    "function": "<impl ClaritySerializable for u32>::serialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 645,
    "function": "special_asserts",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 323,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 184,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 348,
    "function": "DeserializeStackItem::next_expected_type",
    "return_type": "-> Result<Option<TypeSignature>, SerializationError>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 131,
    "function": "check_special_asserts",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 36,
    "function": "is_separator",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 971,
    "function": "STXBalance::was_locked_by_v1",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 341,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 929,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1878,
    "function": "ClarityDatabase<'a>::make_key_for_account_nonce",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1036,
    "function": "test_dynamic_dispatch_pass_literal_principal_as_trait_in_user_defined_functions",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 934,
    "function": "add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 521,
    "function": "Parser<'a>::read_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 219,
    "function": "RollbackWrapper<'a>::from_persisted_log",
    "return_type": "-> RollbackWrapper",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 661,
    "function": "TypeChecker<'a, 'b>::type_check_function_application",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 125,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1429,
    "function": "Environment<'a, 'b, 'hooks>::register_print_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 331,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::put_all",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 51,
    "function": "ExpressionIdentifier::run_pre_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1445,
    "function": "Environment<'a, 'b, 'hooks>::register_stx_transfer_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 259,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 309,
    "function": "build_ast",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 93,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 44,
    "function": "inner_unwrap_err",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 54,
    "function": "CoverageReporter::report_eval",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 95,
    "function": "<impl StacksMessageCodec for ClarityName>::consensus_deserialize",
    "return_type": "-> Result<ClarityName, codec_error>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![], vec![Default::default()], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 164,
    "function": "test_only_mainnet_to_chain_id",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1347,
    "function": "<impl Display for StandardPrincipalData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 247,
    "function": "SequenceData::atom_values",
    "return_type": "-> Vec<SymbolicExpression>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1611,
    "function": "GlobalContext<'a, 'hooks>::log_asset_transfer",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(Some(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1035,
    "function": "Value::expect_u128",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1026,
    "function": "Value::expect_ascii",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1722,
    "function": "ListTypeData::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 300,
    "function": "<impl DiagnosableError for ParseErrors>::level",
    "return_type": "-> crate::vm::diagnostic::Level",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 272,
    "function": "NFTBurnEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 369,
    "function": "DefinitionSorter::probe_for_dependencies_in_key_value_pair",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 600,
    "function": "OwnedEnvironment<'a, 'hooks>::new_free",
    "return_type": "-> OwnedEnvironment<'a, '_>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 244,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 550,
    "function": "ClarityDatabase<'a>::make_key_for_quad",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 401,
    "function": "check_special_index_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 51,
    "function": "ExpressionIdentifier::run_pre_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1136,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::from((Default::default(), (Default::default(), Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 148,
    "function": "special_match_opt",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 208,
    "function": "<impl SymbolicExpressionCommon for SymbolicExpression>::set_id",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::new((Default::default(), vec![Default::default()], true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/boolean.rs",
    "line": 27,
    "function": "type_force_bool",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 619,
    "function": "<impl SequencedValue for ListData>::drained_items",
    "return_type": "-> Vec<Value>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 485,
    "function": "check_function_arg_signature",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 646,
    "function": "TypeChecker<'a, 'b>::try_native_function_check",
    "return_type": "-> Option<TypeResult>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 620,
    "function": "<impl Display for SymbolicExpression>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 637,
    "function": "<impl SequencedValue for BuffData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 626,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::from((Default::default(), (Default::default(), Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1744,
    "function": "ClarityDatabase<'a>::set_ft_balance",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 144,
    "function": "ArithmeticOnlyChecker<'a>::check_variables_allowed",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 516,
    "function": "ClarityDatabase<'a>::get_value",
    "return_type": "-> Result<Option<ValueResult>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 271,
    "function": "PreSymbolicExpression::span",
    "return_type": "-> &Span",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 824,
    "function": "Value::okay_true",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1044,
    "function": "Value::expect_i128",
    "return_type": "-> i128",
    "replacement": "-1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 639,
    "function": "native_to_int",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 657,
    "function": "<impl SequencedValue for ASCIIData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 684,
    "function": "<impl SequencedValue for UTF8Data>::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1397,
    "function": "test_pass_trait_to_subtrait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 444,
    "function": "RollbackWrapper<'a>::insert_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 457,
    "function": "AssetMap::get_stx",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 39,
    "function": "<impl AnalysisPass for TraitChecker>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1354,
    "function": "<impl Debug for StandardPrincipalData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 396,
    "function": "STXBalanceSnapshot<'db, 'conn>::can_transfer",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 937,
    "function": "ClarityDatabase<'a>::get_pox_payout_addrs_for_burnchain_height",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 819,
    "function": "ClarityDatabase<'a>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1883,
    "function": "<impl Display for TypeSignature>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 296,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::from(true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 1047,
    "function": "STXBalance::has_unlockable_tokens_at_burn_block",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 838,
    "function": "Value::err_none",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 172,
    "function": "handle_define_persisted_variable",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1664,
    "function": "ClarityDatabase<'a>::checked_increase_token_supply",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 650,
    "function": "test_reentrant_dynamic_dispatch",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 87,
    "function": "native_try_ret",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 716,
    "function": "ClarityDatabase<'a>::ustx_liquid_supply_key",
    "return_type": "-> &'static str",
    "replacement": "\"\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![], vec![], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 288,
    "function": "build_ast_precheck_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 857,
    "function": "TupleTypeSignature::field_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 53,
    "function": "check_vary",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 358,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 442,
    "function": "special_at_block",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 128,
    "function": "Lexer<'a>::skip_whitespace",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from(Some(()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 560,
    "function": "native_mul",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1236,
    "function": "ClarityDatabase<'a>::lookup_variable_with_size",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 178,
    "function": "produce_docs_refs",
    "return_type": "-> BTreeMap<String, ContractRef>",
    "replacement": "BTreeMap::from_iter([(String::new(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 110,
    "function": "TraitContext::into_contract_analysis",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 262,
    "function": "test_dynamic_dispatch_by_implementing_imported_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1339,
    "function": "TypeSignature::literal_type_of",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 575,
    "function": "Lexer<'a>::read_utf8_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 825,
    "function": "<impl TryFrom for TupleTypeSignature>::try_from",
    "return_type": "-> Result<TupleTypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::from(BTreeSet::from_iter([Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1690,
    "function": "TypeSignature::type_size",
    "return_type": "-> Result<u32>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1182,
    "function": "BuffData::as_slice",
    "return_type": "-> &[u8]",
    "replacement": "Vec::leak(vec![0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 163,
    "function": "ContractAnalysis::get_public_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 354,
    "function": "RollbackWrapper<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/maps.rs",
    "line": 160,
    "function": "check_special_insert_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 136,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 363,
    "function": "RollbackWrapper<'a>::get",
    "return_type": "-> Option<T>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 181,
    "function": "ContractInterfaceAtomType::from_type_signature",
    "return_type": "-> ContractInterfaceAtomType",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 96,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 66,
    "function": "Lexer<'a>::add_diagnostic",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1658,
    "function": "TypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 77,
    "function": "ArithmeticOnlyChecker<'a>::run",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 265,
    "function": "SequenceData::len",
    "return_type": "-> usize",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 40,
    "function": "version_matches_testnet",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 238,
    "function": "PreSymbolicExpression::set_span",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 312,
    "function": "ContractContext::get_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 88,
    "function": "ReadOnlyChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 707,
    "function": "ClarityDatabase<'a>::get_contract",
    "return_type": "-> Result<Contract>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 98,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 111,
    "function": "Lexer<'a>::report_line_ending",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::from_iter([(None, Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 189,
    "function": "rollback_lookup_map",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 270,
    "function": "LimitedCostTracker::cost_function_references",
    "return_type": "-> HashMap<&'static ClarityCostFunction, ClarityCostFunctionReference>",
    "replacement": "HashMap::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 119,
    "function": "<impl Display for FunctionIdentifier>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 516,
    "function": "ClarityDatabase<'a>::get_value",
    "return_type": "-> Result<Option<ValueResult>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1394,
    "function": "<impl From for StandardPrincipalData>::from",
    "return_type": "-> StandardPrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 28,
    "function": "inner_unwrap",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 975,
    "function": "STXBalance::was_locked_by_v2",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 992,
    "function": "TypeSignature::max_buffer",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 485,
    "function": "check_function_arg_signature",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 396,
    "function": "TypeSignature::max_serialized_size",
    "return_type": "-> Result<u32, CheckErrors>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 86,
    "function": "TraitContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 463,
    "function": "Parser<'a>::open_tuple",
    "return_type": "-> ParseResult<SetupTupleResult>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 733,
    "function": "TypeSignature::canonicalize_v2_1",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 308,
    "function": "DefinedFunction::check_trait_expectations",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 191,
    "function": "ContractContext::ft_exists",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 485,
    "function": "check_function_arg_signature",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 984,
    "function": "ClarityDatabase<'a>::get_block_reward",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 178,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 339,
    "function": "check_special_if",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 782,
    "function": "ClarityDatabase<'a>::is_in_regtest",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 168,
    "function": "inner_unwrap_err",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 213,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1202,
    "function": "ClarityDatabase<'a>::lookup_variable_unknown_descriptor",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 158,
    "function": "Parser<'a>::peek_last_token",
    "return_type": "-> ParseResult<&PlacedToken>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1341,
    "function": "StandardPrincipalData::to_address",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1841,
    "function": "ContractContext::get_clarity_version",
    "return_type": "-> &ClarityVersion",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 91,
    "function": "check_special_as_contract",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 146,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 130,
    "function": "build_ast_typical",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 912,
    "function": "special_burn_token",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1427,
    "function": "ClarityDatabase<'a>::set_entry_unknown_descriptor",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 278,
    "function": "SequenceData::element_at",
    "return_type": "-> Option<Value>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 212,
    "function": "lookup_reserved_functions",
    "return_type": "-> Option<CallableType>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 274,
    "function": "<impl From for CheckError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 476,
    "function": "special_greater_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 106,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1639,
    "function": "GlobalContext<'a, 'hooks>::log_stx_burn",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 296,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 434,
    "function": "special_leq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1760,
    "function": "ClarityDatabase<'a>::get_ft_supply",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 115,
    "function": "DefinitionSorter::probe_for_dependencies",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 319,
    "function": "native_index_of",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/version.rs",
    "line": 15,
    "function": "<impl Display for ClarityVersion>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1197,
    "function": "ListData::len",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 572,
    "function": "native_log2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 324,
    "function": "DefinitionSorter::probe_for_dependencies_in_define_args",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1528,
    "function": "test_pass_embedded_trait_to_subtrait_optional",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 754,
    "function": "STXBalance::unlock_height",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 197,
    "function": "<impl SymbolicExpressionCommon for PreSymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[PreSymbolicExpression]>",
    "replacement": "Some(Vec::leak(vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 262,
    "function": "<impl Error for CheckError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 480,
    "function": "ListTypeData::get_list_item_type",
    "return_type": "-> &TypeSignature",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 357,
    "function": "DefinitionSorter::probe_for_dependencies_in_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1080,
    "function": "Value::expect_buff_padded",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1559,
    "function": "byte_len_of_serialization",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1388,
    "function": "<impl Display for TraitIdentifier>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 388,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 754,
    "function": "BlockInfoProperty::lookup_by_name_at_version",
    "return_type": "-> Option<BlockInfoProperty>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 313,
    "function": "PreSymbolicExpression::field_identifier",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 118,
    "function": "create_principal_true_error_response",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 876,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from_iter([0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 295,
    "function": "AssetMap::add_stx_transfer",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::new((Default::default(), vec![], false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 659,
    "function": "ClarityDatabase<'a>::get_contract_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 72,
    "function": "ArithmeticOnlyChecker<'a>::check_contract_cost_eligible",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1308,
    "function": "PrincipalData::parse",
    "return_type": "-> Result<PrincipalData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1222,
    "function": "ASCIIData::append",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 209,
    "function": "<impl ClarityValueSerializable for StandardPrincipalData>::deserialize_read",
    "return_type": "-> Result<Self, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 39,
    "function": "generate_test_burn_state_db",
    "return_type": "-> UnitTestBurnStateDB",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 105,
    "function": "cost_input_sized_vararg",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1938,
    "function": "ClarityDatabase<'a>::get_account_nonce",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 380,
    "function": "PreSymbolicExpression::match_field_identifier",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1176,
    "function": "ExecutionCost::max_value",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1658,
    "function": "TypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 121,
    "function": "SqliteConnection::drop_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 752,
    "function": "OwnedEnvironment<'a, 'hooks>::execute_transaction",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 395,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1078,
    "function": "Environment<'a, 'b, 'hooks>::run_free",
    "return_type": "-> A",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 0, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 317,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 699,
    "function": "LimitedCostTracker::new_max_limit",
    "return_type": "-> Result<LimitedCostTracker>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 0, 1)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 153,
    "function": "<impl From for ParseError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 328,
    "function": "STXBalanceSnapshot<'db, 'conn>::balance",
    "return_type": "-> &STXBalance",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 158,
    "function": "Parser<'a>::peek_last_token",
    "return_type": "-> ParseResult<&PlacedToken>",
    "replacement": "ParseResult::from_iter([&Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 0, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 515,
    "function": "TypeSignature::is_no_type",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 271,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 252,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 629,
    "function": "native_to_uint",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 102,
    "function": "AssetMap::to_json",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1290,
    "function": "ClarityDatabase<'a>::make_key_for_data_map_entry",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 84,
    "function": "check_special_as_contract",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 128,
    "function": "stx_transfer_consolidated",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 307,
    "function": "ContractInterfaceFungibleTokens::from_set",
    "return_type": "-> Vec<Self>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1468,
    "function": "ClarityDatabase<'a>::insert_entry",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 191,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 159,
    "function": "ContractAnalysis::add_implemented_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([String::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1136,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::from_iter([(Default::default(), (Default::default(), Default::default()))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 131,
    "function": "Parser<'a>::next_token",
    "return_type": "-> Option<PlacedToken>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 279,
    "function": "ContractContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 364,
    "function": "native_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1478,
    "function": "TupleData::len",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 960,
    "function": "Environment<'a, 'b, 'hooks>::nest_as_principal",
    "return_type": "-> Environment<'c, 'b, 'hooks>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 252,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 145,
    "function": "inner_unwrap",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 351,
    "function": "SequenceData::contains",
    "return_type": "-> Result<Option<usize>>",
    "replacement": "Ok(Some(0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 163,
    "function": "<impl ClaritySerializable for STXBalance>::serialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1301,
    "function": "<impl ClaritySerializable for u32>::serialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 314,
    "function": "<impl HeadersDB for NullHeadersDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1114,
    "function": "Value::try_deserialize_bytes_exact",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 96,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 201,
    "function": "TraitsResolver::probe_for_generics",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 270,
    "function": "handle_impl_trait",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 110,
    "function": "SqliteConnection::commit_metadata_to",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 566,
    "function": "native_pow",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 319,
    "function": "<impl DiagnosableError for CheckErrors>::message",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 42,
    "function": "<impl Error for Error>::cause",
    "return_type": "-> Option<&dyn std::error::Error>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 376,
    "function": "STXBalanceSnapshot<'db, 'conn>::has_locked_tokens",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 205,
    "function": "lookup_function",
    "return_type": "-> Result<CallableType>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 332,
    "function": "FTBurnEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 408,
    "function": "AssetMap::to_table",
    "return_type": "-> HashMap<PrincipalData, HashMap<AssetIdentifier, AssetMapEntry>>",
    "replacement": "HashMap::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 574,
    "function": "Value::inner_deserialize_read",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 364,
    "function": "native_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/mod.rs",
    "line": 96,
    "function": "version_string",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 292,
    "function": "ContractContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 488,
    "function": "GraphWalker::get_cycling_dependencies",
    "return_type": "-> Option<Vec<usize>>",
    "replacement": "Some(vec![1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 80,
    "function": "native_unwrap_err_or_ret",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 192,
    "function": "SqliteConnection::check_schema",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1551,
    "function": "TypeSignature::parse_trait_type_repr",
    "return_type": "-> Result<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Ok(BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 434,
    "function": "special_leq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 181,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 740,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 527,
    "function": "SymbolicExpression::atom",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 164,
    "function": "ContractInterfaceAtomType::from_tuple_type",
    "return_type": "-> ContractInterfaceAtomType",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 723,
    "function": "special_get_block_info",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([true])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 400,
    "function": "STXBalanceSnapshot<'db, 'conn>::debit",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 369,
    "function": "DefinitionSorter::probe_for_dependencies_in_key_value_pair",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1085,
    "function": "Value::try_deserialize_bytes",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 175,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_miner_address",
    "return_type": "-> Option<StacksAddress>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from_iter([String::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 219,
    "function": "special_stx_account",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([true])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 623,
    "function": "<impl SequencedValue for ListData>::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1011,
    "function": "ClarityDatabase<'a>::set_stx_btc_ops_processed",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 171,
    "function": "Parser<'a>::ignore_whitespace",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1882,
    "function": "ClarityDatabase<'a>::make_key_for_account_stx_locked",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 72,
    "function": "sqlite_has_entry",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1929,
    "function": "<impl Display for FunctionArg>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 895,
    "function": "test_good_call_with_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 82,
    "function": "TypingContext<'a>::extend",
    "return_type": "-> CheckResult<TypingContext>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1555,
    "function": "ClarityDatabase<'a>::delete_entry",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 461,
    "function": "AssetMap::get_stx_burned",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 570,
    "function": "SymbolicExpression::match_list",
    "return_type": "-> Option<&[SymbolicExpression]>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 209,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 779,
    "function": "get_output_type_string",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 56,
    "function": "SugarExpander::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 388,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 58,
    "function": "ExpressionIdentifier::run_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 184,
    "function": "check_special_unwrap_or_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 687,
    "function": "Parser<'a>::read_sugared_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 419,
    "function": "special_geq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 27,
    "function": "<impl Display for Error>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from((Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 253,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 421,
    "function": "ClarityDatabase<'a>::new_with_rollback_wrapper",
    "return_type": "-> ClarityDatabase<'a>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 575,
    "function": "native_mod",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/maps.rs",
    "line": 161,
    "function": "check_special_insert_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1117,
    "function": "Value::expect_principal",
    "return_type": "-> PrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 203,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1004,
    "function": "TypeChecker<'a, 'b>::type_check_consecutive_statements",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 59,
    "function": "UTF8Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 96,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 351,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 462,
    "function": "special_leq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 359,
    "function": "DefinedFunction::get_arg_types",
    "return_type": "-> &Vec<TypeSignature>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 476,
    "function": "special_greater_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([Some(String::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 84,
    "function": "rollback_edits_push",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 832,
    "function": "LimitedCostTracker::get_memory_limit",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 206,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 332,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 221,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 2092,
    "function": "test_pass_principal_literal_to_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 131,
    "function": "ContractAnalysis::add_read_only_function",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 140,
    "function": "Parser<'a>::peek_next_token",
    "return_type": "-> PlacedToken",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 223,
    "function": "check_special_stx_transfer_memo",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 277,
    "function": "DefineFunctions::try_parse",
    "return_type": "-> Option<(DefineFunctions, &[SymbolicExpression])>",
    "replacement": "Some((Default::default(), Vec::leak(Vec::new())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1085,
    "function": "<impl Display for ExecutionCost>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 182,
    "function": "ReadOnlyChecker<'a, 'b>::check_reads_only_valid",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 687,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_contract",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 421,
    "function": "Graph::get_node_descendants",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 146,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/boolean.rs",
    "line": 38,
    "function": "special_or",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 247,
    "function": "handle_define_trait",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 1, 0)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 601,
    "function": "ClarityDatabase<'a>::insert_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 875,
    "function": "Value::depth",
    "return_type": "-> u8",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 399,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_ast_rules",
    "return_type": "-> ASTRules",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 533,
    "function": "SequenceData::is_list",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 195,
    "function": "ContractAnalysis::canonicalize_types",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 59,
    "function": "<impl AnalysisPass for ReadOnlyChecker<'a, 'b>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 971,
    "function": "<impl CostTracker for LimitedCostTracker>::compute_cost",
    "return_type": "-> std::result::Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1090,
    "function": "Value::expect_bool",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1396,
    "function": "Environment<'a, 'b, 'hooks>::run_as_transaction",
    "return_type": "-> std::result::Result<O, E>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 794,
    "function": "<impl PartialEq for ListData>::eq",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 754,
    "function": "BlockInfoProperty::lookup_by_name_at_version",
    "return_type": "-> Option<BlockInfoProperty>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([true])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 865,
    "function": "TupleTypeSignature::admits",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 490,
    "function": "SequenceData::slice",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 306,
    "function": "PreSymbolicExpression::trait_reference",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 63,
    "function": "check_special_error",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 425,
    "function": "Graph::has_node_descendants",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1923,
    "function": "<impl Display for StringUTF8Length>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 169,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1311,
    "function": "<impl ClarityDeserializable for u32>::deserialize",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1055,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::from_iter([(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 372,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 388,
    "function": "PreSymbolicExpression::match_placeholder",
    "return_type": "-> Option<&str>",
    "replacement": "Some(\"\")",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 273,
    "function": "FunctionType::canonicalize",
    "return_type": "-> FunctionType",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 909,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 74,
    "function": "<impl BuildASTPass for VaryStackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 28,
    "function": "check",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 726,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_contract_from_ast",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 67,
    "function": "BuffOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 954,
    "function": "ClarityDatabase<'a>::get_miner_address",
    "return_type": "-> StandardPrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 279,
    "function": "ContractContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 358,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 59,
    "function": "native_unwrap",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 60,
    "function": "<impl Error for Error>::source",
    "return_type": "-> Option<&(dyn std::error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/principals.rs",
    "line": 846,
    "function": "create_principal_from_strings",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 281,
    "function": "MemoryBackingStore::as_clarity_db",
    "return_type": "-> ClarityDatabase",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 462,
    "function": "special_leq",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 364,
    "function": "PreSymbolicExpression::match_atom",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 133,
    "function": "SqliteConnection::get_metadata",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 320,
    "function": "check_special_equals",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 87,
    "function": "get_principal",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 191,
    "function": "ContractContext::ft_exists",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 566,
    "function": "native_pow",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 343,
    "function": "DefinedFunction::is_public",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 279,
    "function": "ContractContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 532,
    "function": "RollbackWrapper<'a>::has_metadata_entry",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 291,
    "function": "DefineFunctionsParsed<'a>::try_parse",
    "return_type": "-> std::result::Result<Option<DefineFunctionsParsed<'a>>, CheckErrors>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/conversions.rs",
    "line": 18,
    "function": "check_special_to_consensus_buff",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 676,
    "function": "<impl SequencedValue for UTF8Data>::items",
    "return_type": "-> &Vec<Vec<u8>>",
    "replacement": "&vec![vec![]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 36,
    "function": "<impl DiagnosableError for LexerError>::message",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1085,
    "function": "ClarityDatabase<'a>::get_microblock_poison_report",
    "return_type": "-> Option<(StandardPrincipalData, u16)>",
    "replacement": "Some((Default::default(), 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 105,
    "function": "native_buff_to_int_be",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from(vec![0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1126,
    "function": "ExecutionCost::zero",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 365,
    "function": "<impl TryFrom for BufferLength>::try_from",
    "return_type": "-> Result<BufferLength>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 870,
    "function": "STXBalance::canonical_repr_at_block",
    "return_type": "-> (STXBalance, u128)",
    "replacement": "(Default::default(), 1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 647,
    "function": "<impl SequencedValue for BuffData>::to_value",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 254,
    "function": "native_error",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 101,
    "function": "get_value_or_err",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1696,
    "function": "TypeSignature::inner_type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 380,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 839,
    "function": "contract_analysis_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1198,
    "function": "Value::sanitize_value",
    "return_type": "-> Option<(Value, bool)>",
    "replacement": "Some((Default::default(), false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1019,
    "function": "TypeSignature::factor_out_no_type",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 388,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1238,
    "function": "ExecutionCost::max_cost",
    "return_type": "-> ExecutionCost",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 373,
    "function": "native_bitwise_and",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 669,
    "function": "<impl SequencedValue for ASCIIData>::to_value",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 726,
    "function": "STXBalanceSnapshot<'db, 'conn>::unlock_available_tokens_if_any",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 62,
    "function": "check_special_map",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 389,
    "function": "FunctionIdentifier::new_native_function",
    "return_type": "-> FunctionIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 155,
    "function": "ContractAnalysis::add_defined_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1338,
    "function": "<impl Hash for Value>::hash",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 225,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 133,
    "function": "execute_transaction",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>), Error>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 96,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 963,
    "function": "test_good_call_2_with_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 102,
    "function": "<impl Iterator for PreExpressionsDrain>::next",
    "return_type": "-> Option<PreSymbolicExpression>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1274,
    "function": "<impl Display for Value>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 569,
    "function": "execute_v2",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 688,
    "function": "TypeChecker<'a, 'b>::lookup_variable",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1301,
    "function": "PrincipalData::version",
    "return_type": "-> u8",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 488,
    "function": "GraphWalker::get_cycling_dependencies",
    "return_type": "-> Option<Vec<usize>>",
    "replacement": "Some(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 1, 1)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 610,
    "function": "SymbolicExpression::match_field",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 443,
    "function": "<impl DiagnosableError for CheckErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::from_iter([BTreeSet::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 499,
    "function": "handle_expression",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 541,
    "function": "ClarityDatabase<'a>::clarity_state_epoch_key",
    "return_type": "-> &'static str",
    "replacement": "\"\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 139,
    "function": "<impl CostTracker for ()>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 431,
    "function": "ClarityDatabase<'a>::is_stack_empty",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 633,
    "function": "<impl SequencedValue for BuffData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 123,
    "function": "AnalysisDatabase<'a>::insert_contract",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1105,
    "function": "Environment<'a, 'b, 'hooks>::execute_contract",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 312,
    "function": "native_len",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 171,
    "function": "Parser<'a>::ignore_whitespace",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1108,
    "function": "Value::expect_optional",
    "return_type": "-> Option<Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 602,
    "function": "SymbolicExpression::match_trait_reference",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 61,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 463,
    "function": "Parser<'a>::open_tuple",
    "return_type": "-> ParseResult<SetupTupleResult>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 407,
    "function": "special_fetch_entry_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 566,
    "function": "native_pow",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 854,
    "function": "special_get_owner_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 113,
    "function": "ParseError::has_pre_expression",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from((Default::default(), vec![Default::default()], false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1173,
    "function": "ClarityDatabase<'a>::set_variable",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::new((Default::default(), vec![Default::default()], false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 461,
    "function": "AssetMap::get_stx_burned",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 48,
    "function": "TraitsResolver::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 420,
    "function": "RollbackWrapper<'a>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 69,
    "function": "AssetIdentifier::sugared",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 541,
    "function": "ClarityDatabase<'a>::clarity_state_epoch_key",
    "return_type": "-> &'static str",
    "replacement": "\"xyzzy\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 758,
    "function": "special_as_contract",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1439,
    "function": "<impl From for PrincipalData>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1748,
    "function": "TupleTypeSignature::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 211,
    "function": "<impl SymbolicExpressionCommon for SymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[SymbolicExpression]>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 147,
    "function": "test_dynamic_dispatch_pass_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 102,
    "function": "<impl Iterator for PreExpressionsDrain>::next",
    "return_type": "-> Option<PreSymbolicExpression>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 692,
    "function": "parse_eval_bindings",
    "return_type": "-> Result<Vec<(ClarityName, Value)>>",
    "replacement": "Ok(vec![(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 429,
    "function": "<impl TryFrom for StringUTF8Length>::try_from",
    "return_type": "-> Result<StringUTF8Length>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 415,
    "function": "<impl TryFrom for StringUTF8Length>::try_from",
    "return_type": "-> Result<StringUTF8Length>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 380,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_prepare_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1735,
    "function": "ListTypeData::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 206,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 580,
    "function": "ClarityDatabase<'a>::get_contract_src",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 470,
    "function": "GraphWalker::sort_dependencies_recursion",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 164,
    "function": "ContractContext::is_contract",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 240,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 481,
    "function": "execute_on_network",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1006,
    "function": "ClarityDatabase<'a>::get_stx_btc_ops_processed",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 369,
    "function": "native_bitwise_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1346,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 918,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 705,
    "function": "special_let",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1023,
    "function": "TypeChecker<'a, 'b>::type_check_all",
    "return_type": "-> CheckResult<Vec<TypeSignature>>",
    "replacement": "CheckResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 288,
    "function": "build_ast_precheck_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1912,
    "function": "ClarityDatabase<'a>::get_stx_balance_snapshot_genesis",
    "return_type": "-> STXBalanceSnapshot<'a, 'conn>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 984,
    "function": "ClarityDatabase<'a>::get_block_reward",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 64,
    "function": "FunctionType::check_args_by_allowing_trait_cast",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 969,
    "function": "TypeChecker<'a, 'b>::type_check_expects",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1055,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 48,
    "function": "<impl BuildASTPass for StackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 307,
    "function": "DefinitionSorter::probe_for_dependencies_in_tuple",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::from((Default::default(), false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 726,
    "function": "ResponseData::type_signature",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 517,
    "function": "RollbackWrapper<'a>::has_entry",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 67,
    "function": "<impl DiagnosableError for LexerError>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/maps.rs",
    "line": 152,
    "function": "check_special_set_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1882,
    "function": "ClarityDatabase<'a>::make_key_for_account_stx_locked",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 52,
    "function": "ASCIIOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 372,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_v2_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 902,
    "function": "FixedFunction::total_type_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 340,
    "function": "check_special_match_resp",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 129,
    "function": "TypingContext<'a>::lookup_trait_reference_type",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 112,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1893,
    "function": "ClarityDatabase<'a>::get_stx_balance_snapshot",
    "return_type": "-> STXBalanceSnapshot<'a, 'conn>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 751,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 764,
    "function": "OwnedEnvironment<'a, 'hooks>::stx_transfer",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 364,
    "function": "PreSymbolicExpression::match_atom",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 165,
    "function": "ArithmeticOnlyChecker<'a>::try_native_function_check",
    "return_type": "-> Option<Result<(), Error>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 344,
    "function": "check_special_if",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 560,
    "function": "native_mul",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 44,
    "function": "inner_unwrap_err",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 443,
    "function": "<impl DiagnosableError for CheckErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 187,
    "function": "<impl ClaritySerializable for ContractCommitment>::serialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 490,
    "function": "special_greater_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 268,
    "function": "check_special_burn_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 291,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 187,
    "function": "check_special_unwrap_or_ret",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from((Default::default(), vec![], false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 629,
    "function": "native_to_uint",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 137,
    "function": "create_principal_value_error_response",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 198,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 252,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 296,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([String::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 66,
    "function": "AnalysisDatabase<'a>::roll_back",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 154,
    "function": "safe_convert_string_to_int",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 210,
    "function": "native_int_to_utf8",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 368,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 212,
    "function": "lookup_reserved_functions",
    "return_type": "-> Option<CallableType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 879,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 754,
    "function": "STXBalance::unlock_height",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 243,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 771,
    "function": "OwnedEnvironment<'a, 'hooks>::stx_faucet",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 848,
    "function": "TupleTypeSignature::len",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 351,
    "function": "SequenceData::contains",
    "return_type": "-> Result<Option<usize>>",
    "replacement": "Ok(Some(1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 78,
    "function": "Lexer<'a>::read_char",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 224,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 899,
    "function": "TypeChecker<'a, 'b>::track_return_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 604,
    "function": "native_bitwise_right_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 610,
    "function": "SymbolicExpression::match_field",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1262,
    "function": "<impl Display for BuffData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/mod.rs",
    "line": 81,
    "function": "boot_util::boot_code_addr",
    "return_type": "-> StacksAddress",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 74,
    "function": "<impl BuildASTPass for VaryStackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 639,
    "function": "native_to_int",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 70,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 190,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 369,
    "function": "eval_all",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 595,
    "function": "native_begin",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 311,
    "function": "Lexer<'a>::read_unsigned",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 80,
    "function": "is_err_code",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 56,
    "function": "check_special_get_balance",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1062,
    "function": "Parser<'a>::parse_node_or_eof",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 253,
    "function": "ContractContext::add_persisted_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 104,
    "function": "<impl MemoryConsumer for Value>::get_memory_use",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::new((Default::default(), vec![], true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/tuples.rs",
    "line": 30,
    "function": "tuple_cons",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 318,
    "function": "ContractInterfaceNonFungibleTokens::from_map",
    "return_type": "-> Vec<Self>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 41,
    "function": "StacksTransactionEvent::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 975,
    "function": "STXBalance::was_locked_by_v2",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 62,
    "function": "TraitContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 388,
    "function": "PreSymbolicExpression::match_placeholder",
    "return_type": "-> Option<&str>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 809,
    "function": "get_signature",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 388,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 100,
    "function": "check_special_at_block",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 123,
    "function": "AnalysisDatabase<'a>::insert_contract",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 394,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 162,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 198,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 535,
    "function": "TypeChecker<'a, 'b>::get_function_type",
    "return_type": "-> Option<FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 186,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 744,
    "function": "STXBalance::zero",
    "return_type": "-> STXBalance",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 619,
    "function": "OwnedEnvironment<'a, 'hooks>::new_cost_limited",
    "return_type": "-> OwnedEnvironment<'a, '_>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 504,
    "function": "special_greater",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 572,
    "function": "native_log2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 101,
    "function": "QualifiedContractIdentifier::transient",
    "return_type": "-> QualifiedContractIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 263,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 147,
    "function": "ContractAnalysis::add_fungible_token",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 986,
    "function": "TypeChecker<'a, 'b>::type_check",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 268,
    "function": "<impl Error for CheckErrors>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 126,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1483,
    "function": "TupleData::is_empty",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 82,
    "function": "check_special_print",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1129,
    "function": "ClarityDatabase<'a>::create_variable",
    "return_type": "-> DataVariableMetadata",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1182,
    "function": "BuffData::as_slice",
    "return_type": "-> &[u8]",
    "replacement": "Vec::leak(Vec::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 436,
    "function": "special_mint_asset_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 263,
    "function": "AssetMap::get_next_stx_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 351,
    "function": "TypeChecker<'a, 'b>::into_contract_analysis",
    "return_type": "-> LimitedCostTracker",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 386,
    "function": "STXBalanceSnapshot<'db, 'conn>::has_unlockable_tokens",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 233,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 230,
    "function": "ContractAnalysis::check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 497,
    "function": "TypeChecker<'a, 'b>::type_check_consecutive_statements",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 126,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 182,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 271,
    "function": "<impl HeadersDB for NullHeadersDB>::get_burn_header_hash_for_block",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 181,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 500,
    "function": "check_secp256k1_verify",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 145,
    "function": "FunctionType::check_args_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 109,
    "function": "QualifiedContractIdentifier::parse",
    "return_type": "-> Result<QualifiedContractIdentifier>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 167,
    "function": "ContractAnalysis::get_read_only_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 230,
    "function": "ContractAnalysis::check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 59,
    "function": "rollback_check_pre_bottom_commit",
    "return_type": "-> Vec<(T, String)>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 470,
    "function": "ListTypeData::reduce_max_len",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 958,
    "function": "TypeSignature::empty_buffer",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 168,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 266,
    "function": "ContractInterfaceFunction::from_map",
    "return_type": "-> Vec<ContractInterfaceFunction>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 571,
    "function": "clarity2_trait_check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1372,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 118,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 937,
    "function": "ClarityDatabase<'a>::get_pox_payout_addrs_for_burnchain_height",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 40,
    "function": "<impl BuildASTPass for SugarExpander>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 260,
    "function": "special_stx_burn",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1478,
    "function": "TupleData::len",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(Some(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1050,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::compute_cost",
    "return_type": "-> std::result::Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 821,
    "function": "test_total_supply",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 33,
    "function": "check_special_get_owner",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 985,
    "function": "test_simple_naming_system",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 87,
    "function": "special_fold",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 36,
    "function": "<impl BuildASTPass for TraitsResolver>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 623,
    "function": "special_if",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1153,
    "function": "ExecutionCost::proportion_dot_product",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1672,
    "function": "test_pass_embedded_trait_to_subtrait_err",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 120,
    "function": "<impl From for SerializationError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 303,
    "function": "<impl PartialEq for LimitedCostTracker>::eq",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 680,
    "function": "<impl SequencedValue for UTF8Data>::drained_items",
    "return_type": "-> Vec<Vec<u8>>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 641,
    "function": "STXBalanceSnapshot<'db, 'conn>::increase_lock_v3",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 620,
    "function": "ClarityDatabase<'a>::fetch_metadata",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 295,
    "function": "<impl HeadersDB for NullHeadersDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 664,
    "function": "Span::zero",
    "return_type": "-> Span",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 48,
    "function": "<impl ClarityDeserializable for String>::deserialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1135,
    "function": "Environment<'a, 'b, 'hooks>::inner_execute_contract",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 113,
    "function": "check_special_default_to",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 210,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 920,
    "function": "STXBalance::get_locked_balance_at_burn_block",
    "return_type": "-> (u128, u64)",
    "replacement": "(1, 0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 303,
    "function": "formatted_expected_types",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 554,
    "function": "native_add",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 173,
    "function": "special_match_resp",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 182,
    "function": "ReadOnlyChecker<'a, 'b>::check_reads_only_valid",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 525,
    "function": "ClarityDatabase<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 879,
    "function": "ClarityDatabase<'a>::get_sortition_id_for_stacks_tip",
    "return_type": "-> Option<SortitionId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1385,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 662,
    "function": "check_get_burn_block_info",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 737,
    "function": "ClarityDatabase<'a>::get_total_liquid_ustx",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1602,
    "function": "ClarityDatabase<'a>::create_fungible_token",
    "return_type": "-> FungibleTokenMetadata",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1778,
    "function": "ClarityDatabase<'a>::get_nft_owner",
    "return_type": "-> Result<PrincipalData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 325,
    "function": "test_dynamic_dispatch_by_implementing_imported_trait_mul_funcs",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 389,
    "function": "Lexer<'a>::read_ascii_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 103,
    "function": "check_special_begin",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 104,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 185,
    "function": "Lexer<'a>::proceed_through_error_string",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 227,
    "function": "is_okay",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 159,
    "function": "SqliteConnection::initialize_conn",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 62,
    "function": "TraitContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1833,
    "function": "ContractContext::is_name_used",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 184,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 169,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1324,
    "function": "PrincipalData::parse_standard_principal",
    "return_type": "-> Result<StandardPrincipalData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 634,
    "function": "ClarityDatabase<'a>::fetch_metadata_manual",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 530,
    "function": "TypeChecker<'a, 'b>::type_check_function_type",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 102,
    "function": "TraitContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 219,
    "function": "Parser<'a>::handle_open_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::new(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1826,
    "function": "ClarityDatabase<'a>::set_nft_owner",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 84,
    "function": "AnalysisDatabase<'a>::has_contract",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 183,
    "function": "ContractAnalysis::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from(Some(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 813,
    "function": "ClarityDatabase<'a>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/diagnostic.rs",
    "line": 56,
    "function": "Diagnostic::add_span",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 126,
    "function": "ContractAnalysis::add_persisted_variable_type",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1099,
    "function": "<impl FromSql for ExecutionCost>::column_result",
    "return_type": "-> FromSqlResult<ExecutionCost>",
    "replacement": "FromSqlResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1658,
    "function": "TypeSignature::inner_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 581,
    "function": "<impl Display for UTF8Data>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 203,
    "function": "check_special_concat",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 258,
    "function": "native_default_to",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1153,
    "function": "ExecutionCost::proportion_dot_product",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 381,
    "function": "native_bitwise_not",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 106,
    "function": "AnalysisDatabase<'a>::load_contract",
    "return_type": "-> Option<ContractAnalysis>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1178,
    "function": "BuffData::len",
    "return_type": "-> BufferLength",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 53,
    "function": "parse",
    "return_type": "-> Result<Vec<SymbolicExpression>, Error>",
    "replacement": "Ok(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 103,
    "function": "build_ast_with_rules",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 653,
    "function": "<impl SequencedValue for ASCIIData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 224,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 518,
    "function": "special_less_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new(Some(()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::from_iter([BTreeMap::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 256,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_ast_rules",
    "return_type": "-> ASTRules",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 153,
    "function": "SqliteConnection::has_entry",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1814,
    "function": "ContractContext::lookup_variable",
    "return_type": "-> Option<&Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 926,
    "function": "<impl CostTracker for GlobalContext<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 332,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 182,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 166,
    "function": "safe_convert_string_to_uint",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 61,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1502,
    "function": "ClarityDatabase<'a>::inner_set_entry",
    "return_type": "-> Result<ValueResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1749,
    "function": "GlobalContext<'a, 'hooks>::roll_back",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 1, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 36,
    "function": "<impl DiagnosableError for LexerError>::message",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1878,
    "function": "LocalContext<'a>::depth",
    "return_type": "-> u16",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 40,
    "function": "update_expression_id",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 139,
    "function": "SequenceSubtype::is_list_type",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1183,
    "function": "Value::serialize_to_hex",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 61,
    "function": "execute_on_network",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 457,
    "function": "AssetMap::get_stx",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 135,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 52,
    "function": "ASCIIOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1136,
    "function": "TypeChecker<'a, 'b>::type_check_define_map",
    "return_type": "-> CheckResult<(ClarityName, (TypeSignature, TypeSignature))>",
    "replacement": "CheckResult::new((Default::default(), (Default::default(), Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 979,
    "function": "special_burn_asset_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 211,
    "function": "<impl SymbolicExpressionCommon for SymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[SymbolicExpression]>",
    "replacement": "Some(Vec::leak(Vec::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 48,
    "function": "AnalysisDatabase<'a>::execute",
    "return_type": "-> Result<T, E>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 401,
    "function": "check_special_index_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1117,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_add",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 348,
    "function": "PreSymbolicExpression::match_trait_reference",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from((Default::default(), BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1690,
    "function": "TypeSignature::type_size",
    "return_type": "-> Result<u32>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1852,
    "function": "<impl Display for TupleTypeSignature>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1551,
    "function": "TypeSignature::parse_trait_type_repr",
    "return_type": "-> Result<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Ok(BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1476,
    "function": "TypeSignature::parse_response_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 67,
    "function": "BuffOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 973,
    "function": "ClarityDatabase<'a>::get_miner_spend_total",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 93,
    "function": "check_special_at_block",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 826,
    "function": "LimitedCostTracker::get_memory",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 396,
    "function": "PreSymbolicExpression::match_comment",
    "return_type": "-> Option<&str>",
    "replacement": "Some(\"xyzzy\")",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 262,
    "function": "<impl Error for CheckError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 44,
    "function": "NativeVariables::lookup_by_name_at_version",
    "return_type": "-> Option<NativeVariables>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 327,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 535,
    "function": "Value::deserialize_read_count",
    "return_type": "-> Result<(Value, u64), SerializationError>",
    "replacement": "Ok((Default::default(), 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 157,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 35,
    "function": "check_special_okay",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1947,
    "function": "CallStack::insert",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 672,
    "function": "handle_binding_list",
    "return_type": "-> std::result::Result<(), E>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 177,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 853,
    "function": "TupleTypeSignature::is_empty",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 845,
    "function": "type_reserved_variable",
    "return_type": "-> Option<TypeSignature>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 106,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 354,
    "function": "RollbackWrapper<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 311,
    "function": "Lexer<'a>::read_unsigned",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 108,
    "function": "get_lines_at",
    "return_type": "-> Vec<usize>",
    "replacement": "vec![1]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/version.rs",
    "line": 46,
    "function": "<impl FromStr for ClarityVersion>::from_str",
    "return_type": "-> Result<ClarityVersion, Error>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 64,
    "function": "FunctionType::check_args_by_allowing_trait_cast",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 46,
    "function": "check_special_some",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 535,
    "function": "TypeSignature::admits_type_v2_0",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 988,
    "function": "STXBalance::has_locked_tokens_at_burn_block",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::new(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 203,
    "function": "ContractContext::add_public_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 285,
    "function": "MemoryBackingStore::as_analysis_db",
    "return_type": "-> AnalysisDatabase",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 95,
    "function": "check_special_is_optional",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 59,
    "function": "UTF8Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 918,
    "function": "Value::cons_list",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 434,
    "function": "special_leq_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1447,
    "function": "ClarityDatabase<'a>::insert_entry_unknown_descriptor",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 518,
    "function": "special_less_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 388,
    "function": "TypeChecker<'a, 'b>::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/datamaps.rs",
    "line": 689,
    "function": "make_tuple",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 187,
    "function": "<impl ClaritySerializable for ContractCommitment>::serialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1766,
    "function": "TupleTypeSignature::size",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1325,
    "function": "<impl StacksMessageCodec for Value>::consensus_serialize",
    "return_type": "-> Result<(), codec_error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 569,
    "function": "native_sqrti",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::from_iter([(Default::default(), BTreeMap::new())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 88,
    "function": "is_err_code_i128",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 856,
    "function": "OwnedEnvironment<'a, 'hooks>::add_eval_hook",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 261,
    "function": "FunctionReturnsSignature::canonicalize",
    "return_type": "-> FunctionReturnsSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 44,
    "function": "NativeVariables::lookup_by_name_at_version",
    "return_type": "-> Option<NativeVariables>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 193,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1748,
    "function": "TupleTypeSignature::type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 396,
    "function": "PreSymbolicExpression::match_comment",
    "return_type": "-> Option<&str>",
    "replacement": "Some(\"\")",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 147,
    "function": "<impl From for ParseError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1646,
    "function": "GlobalContext<'a, 'hooks>::execute",
    "return_type": "-> Result<T>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::from_iter([true]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 181,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 184,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1472,
    "function": "Environment<'a, 'b, 'hooks>::register_nft_transfer_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2583,
    "function": "make_define_reference",
    "return_type": "-> FunctionAPI",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1007,
    "function": "TypeSignature::bound_string_ascii_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 28,
    "function": "check",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 511,
    "function": "TypeSignature::is_response_type",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 96,
    "function": "ArithmeticOnlyChecker<'a>::check_top_levels",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 524,
    "function": "TypeSignature::admits_type",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 476,
    "function": "special_greater_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 767,
    "function": "STXBalance::effective_unlock_height",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 39,
    "function": "<impl AnalysisPass for TraitChecker>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 116,
    "function": "<impl From for Value>::from",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 178,
    "function": "produce_docs_refs",
    "return_type": "-> BTreeMap<String, ContractRef>",
    "replacement": "BTreeMap::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 840,
    "function": "special_get_burn_block_info",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 534,
    "function": "SymbolicExpression::literal_value",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 1, 1)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 462,
    "function": "unescape_ascii_chars",
    "return_type": "-> ParseResult<String>",
    "replacement": "ParseResult::from_iter([\"xyzzy\".into()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1299,
    "function": "Environment<'a, 'b, 'hooks>::initialize_contract_from_ast",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 65,
    "function": "TypeMap::get_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 575,
    "function": "native_mod",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 346,
    "function": "FunctionType::clarity2_principal_to_callable_type",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 102,
    "function": "TraitContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 896,
    "function": "TupleTypeSignature::shallow_merge",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 305,
    "function": "type_reserved_variable",
    "return_type": "-> Option<TypeSignature>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 0, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::from(BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(Some(String::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 296,
    "function": "<impl DiagnosableError for ParseErrors>::suggestion",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 569,
    "function": "native_sqrti",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1346,
    "function": "TypeChecker<'a, 'b>::type_check_define_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new((Default::default(), BTreeMap::from_iter([(Default::default(), Default::default())])))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 233,
    "function": "RollbackWrapper<'a>::nest",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 790,
    "function": "STXBalance::amount_locked",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 343,
    "function": "DefinedFunction::is_public",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 886,
    "function": "Value::list_with_type",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1040,
    "function": "Environment<'a, 'b, 'hooks>::eval_read_only",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 566,
    "function": "check_principal_of",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 70,
    "function": "AnalysisDatabase<'a>::storage_key",
    "return_type": "-> &'static str",
    "replacement": "\"xyzzy\"",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1825,
    "function": "ContractContext::lookup_trait_definition",
    "return_type": "-> Option<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 303,
    "function": "formatted_expected_types",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1833,
    "function": "ContractContext::is_name_used",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1489,
    "function": "TypeSignature::parse_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 141,
    "function": "<impl Error for ParseError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1044,
    "function": "Value::expect_i128",
    "return_type": "-> i128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 53,
    "function": "parse",
    "return_type": "-> Result<Vec<SymbolicExpression>, Error>",
    "replacement": "Ok(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 833,
    "function": "OwnedEnvironment<'a, 'hooks>::begin",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 166,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1851,
    "function": "ClarityDatabase<'a>::burn_nft",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 518,
    "function": "special_less_v1",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 304,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1093,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1012,
    "function": "<impl CostTracker for LimitedCostTracker>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 227,
    "function": "ReadOnlyChecker<'a, 'b>::check_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([false])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 49,
    "function": "AssetIdentifier::STX",
    "return_type": "-> AssetIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 560,
    "function": "native_mul",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 525,
    "function": "ClarityDatabase<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![1]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 213,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 483,
    "function": "SymbolicExpression::set_span",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 307,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_block_at_height",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 53,
    "function": "check_vary",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 156,
    "function": "FunctionType::check_args_2_1",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::new(BTreeSet::from_iter([Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 281,
    "function": "<impl HeadersDB for NullHeadersDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 197,
    "function": "<impl SymbolicExpressionCommon for PreSymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[PreSymbolicExpression]>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 950,
    "function": "add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 971,
    "function": "STXBalance::was_locked_by_v1",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 113,
    "function": "inner_handle_tuple_get",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 864,
    "function": "TypedNativeFunction::type_native_function::parse_principal_basic_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 291,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 333,
    "function": "ContractInterfaceVariable::from_map",
    "return_type": "-> Vec<ContractInterfaceVariable>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 126,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1891,
    "function": "test_pass_embedded_trait_to_subtrait_option_list",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 160,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_height_for_block",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 55,
    "function": "is_reserved_name",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 247,
    "function": "tx_sponsor_contract_asserts",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 569,
    "function": "native_sqrti",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1357,
    "function": "TypeChecker<'a, 'b>::type_check_define_persisted_variable",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 167,
    "function": "ContractAnalysis::get_read_only_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 129,
    "function": "TypingContext<'a>::lookup_trait_reference_type",
    "return_type": "-> Option<&TraitIdentifier>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 47,
    "function": "I128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1848,
    "function": "ContractContext::canonicalize_types",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 237,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_rejection_fraction",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 175,
    "function": "ContractAnalysis::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 536,
    "function": "test_dynamic_dispatch_mismatched_args",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1409,
    "function": "TypeSignature::parse_tuple_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 69,
    "function": "special_contract_call",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 164,
    "function": "test_only_mainnet_to_chain_id",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 87,
    "function": "ast_check_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 546,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 408,
    "function": "AssetMap::to_table",
    "return_type": "-> HashMap<PrincipalData, HashMap<AssetIdentifier, AssetMapEntry>>",
    "replacement": "HashMap::from_iter([(Default::default(), HashMap::from_iter([(Default::default(), Default::default())]))])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 65,
    "function": "TypeMap::get_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 554,
    "function": "native_add",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 637,
    "function": "<impl SequencedValue for BuffData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 532,
    "function": "special_less_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 239,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_block_at_height",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 295,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1175,
    "function": "Value::serialize_to_vec",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 303,
    "function": "<impl PartialEq for LimitedCostTracker>::eq",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 832,
    "function": "ClarityDatabase<'a>::get_current_burnchain_block_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1219,
    "function": "ExecutionCost::multiply",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/clarity.rs",
    "line": 55,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 67,
    "function": "BuffOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 354,
    "function": "ContractInterfaceMap::from_map",
    "return_type": "-> Vec<ContractInterfaceMap>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 116,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1250,
    "function": "int_log2",
    "return_type": "-> Option<u64>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 139,
    "function": "handle_define_function",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 631,
    "function": "OwnedEnvironment<'a, 'hooks>::get_exec_environment",
    "return_type": "-> Environment<'b, 'a, 'hooks>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 680,
    "function": "<impl SequencedValue for UTF8Data>::drained_items",
    "return_type": "-> Vec<Vec<u8>>",
    "replacement": "vec![vec![1]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 332,
    "function": "STXBalanceSnapshot<'db, 'conn>::save",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::new((None, Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 275,
    "function": "PreSymbolicExpression::sugared_contract_identifier",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1182,
    "function": "BuffData::as_slice",
    "return_type": "-> &[u8]",
    "replacement": "Vec::leak(vec![1])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 189,
    "function": "AnalysisDatabase<'a>::get_defined_trait",
    "return_type": "-> CheckResult<Option<BTreeMap<ClarityName, FunctionSignature>>>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 653,
    "function": "<impl SequencedValue for ASCIIData>::items",
    "return_type": "-> &Vec<u8>",
    "replacement": "&vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 292,
    "function": "PreSymbolicExpression::atom_value",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 233,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1019,
    "function": "ClarityDatabase<'a>::make_microblock_pubkey_height_key",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 433,
    "function": "Graph::edges_count",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::from_iter([(Default::default(), true)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 377,
    "function": "native_bitwise_or",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 215,
    "function": "AnalysisDatabase<'a>::destroy",
    "return_type": "-> RollbackWrapper<'a>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 351,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_burn_header_hash",
    "return_type": "-> Option<BurnchainHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 504,
    "function": "special_greater",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 546,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 64,
    "function": "FunctionType::check_args_by_allowing_trait_cast",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 231,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 720,
    "function": "parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 363,
    "function": "DefinedFunction::canonicalize_types",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 186,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 299,
    "function": "PreSymbolicExpression::atom",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 224,
    "function": "<impl Display for CheckErrors>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 637,
    "function": "<impl SequencedValue for BuffData>::drained_items",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/assets.rs",
    "line": 140,
    "function": "check_special_transfer_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/types.rs",
    "line": 63,
    "function": "ContractAST::add_implemented_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::from_iter([(Default::default(), false)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 153,
    "function": "build_ast_with_diagnostics",
    "return_type": "-> (ContractAST, Vec<Diagnostic>, bool)",
    "replacement": "(Default::default(), vec![], false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 82,
    "function": "TypingContext<'a>::extend",
    "return_type": "-> CheckResult<TypingContext>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 84,
    "function": "ContractContext::ft_exists",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 141,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 920,
    "function": "STXBalance::get_locked_balance_at_burn_block",
    "return_type": "-> (u128, u64)",
    "replacement": "(0, 1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 779,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::new((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 802,
    "function": "ClarityDatabase<'a>::get_current_block_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 420,
    "function": "STXBalanceSnapshot<'db, 'conn>::set_balance",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 194,
    "function": "ContractContext::get_persisted_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 162,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/errors.rs",
    "line": 122,
    "function": "ParseError::set_pre_expressions",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 365,
    "function": "check_contract_call",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 813,
    "function": "ClarityDatabase<'a>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 75,
    "function": "check_special_print",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 831,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::new(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1414,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 55,
    "function": "TraitChecker::run",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 412,
    "function": "Graph::add_node",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 620,
    "function": "ClarityDatabase<'a>::fetch_metadata",
    "return_type": "-> Result<Option<T>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 64,
    "function": "FunctionType::check_args_by_allowing_trait_cast",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 34,
    "function": "test_dynamic_dispatch_by_defining_trait",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 54,
    "function": "DefinitionSorter::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![Default::default()]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 690,
    "function": "<impl SequencedValue for UTF8Data>::to_value",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 51,
    "function": "ExpressionIdentifier::run_pre_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 1, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 203,
    "function": "SqliteConnection::inner_open",
    "return_type": "-> Result<Connection>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 143,
    "function": "ContractAnalysis::add_non_fungible_token",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1521,
    "function": "TupleData::get",
    "return_type": "-> Result<&Value>",
    "replacement": "Ok(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 240,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_reward_cycle_length",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 868,
    "function": "no_type",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 142,
    "function": "inner_unwrap",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 372,
    "function": "PreSymbolicExpression::match_list",
    "return_type": "-> Option<&[PreSymbolicExpression]>",
    "replacement": "Some(Vec::leak(Vec::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 389,
    "function": "ContractInterface::serialize",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 157,
    "function": "<impl Error for Error>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 892,
    "function": "STXBalance::get_available_balance_at_burn_block",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 808,
    "function": "ClarityDatabase<'a>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/maps.rs",
    "line": 107,
    "function": "check_set_or_insert_entry",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 861,
    "function": "TupleTypeSignature::get_type_map",
    "return_type": "-> &BTreeMap<ClarityName, TypeSignature>",
    "replacement": "&BTreeMap::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1330,
    "function": "ClarityDatabase<'a>::fetch_entry",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 177,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 236,
    "function": "ContractInterfaceFunctionArg::from_function_args",
    "return_type": "-> Vec<ContractInterfaceFunctionArg>",
    "replacement": "vec![Default::default()]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1951,
    "function": "ClarityDatabase<'a>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 809,
    "function": "get_signature",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 150,
    "function": "<impl From for RollbackWrapperPersistedLog>::from",
    "return_type": "-> RollbackWrapperPersistedLog",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 726,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_contract_from_ast",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 785,
    "function": "clarity2_lookup_trait",
    "return_type": "-> CheckResult<BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "CheckResult::from(BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1120,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_sub",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 1047,
    "function": "STXBalance::has_unlockable_tokens_at_burn_block",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 50,
    "function": "sqlite_get",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 557,
    "function": "execute",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1065,
    "function": "TypeSignature::least_supertype_v2_0",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 389,
    "function": "Lexer<'a>::read_ascii_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 252,
    "function": "special_concat_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1080,
    "function": "Value::expect_buff_padded",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 150,
    "function": "<impl From for TypePrefix>::from",
    "return_type": "-> TypePrefix",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 55,
    "function": "is_reserved_name",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1652,
    "function": "TypeSignature::size",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from_iter([(Default::default(), vec![Default::default()], true)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 341,
    "function": "PreSymbolicExpression::comment",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 570,
    "function": "SymbolicExpression::match_list",
    "return_type": "-> Option<&[SymbolicExpression]>",
    "replacement": "Some(Vec::leak(vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 424,
    "function": "depth_traverse",
    "return_type": "-> Result<T, E>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 287,
    "function": "<impl HeadersDB for NullHeadersDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 210,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 36,
    "function": "is_separator",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 160,
    "function": "Lexer<'a>::proceed_through_error",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1056,
    "function": "<impl CostTracker for &mut LimitedCostTracker>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1707,
    "function": "GlobalContext<'a, 'hooks>::begin_read_only",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 330,
    "function": "native_element_at",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1321,
    "function": "TypeChecker<'a, 'b>::inner_type_check",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 326,
    "function": "Lexer<'a>::read_integer",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 405,
    "function": "special_geq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1148,
    "function": "Value::expect_result_ok",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 764,
    "function": "OwnedEnvironment<'a, 'hooks>::stx_transfer",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 252,
    "function": "check_special_unwrap",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 189,
    "function": "TraitIdentifier::parse_fully_qualified",
    "return_type": "-> Result<TraitIdentifier>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 354,
    "function": "RollbackWrapper<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 575,
    "function": "Lexer<'a>::read_utf8_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 349,
    "function": "check_special_len",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 604,
    "function": "native_bitwise_right_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 351,
    "function": "DefinedFunction::get_identifier",
    "return_type": "-> FunctionIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 593,
    "function": "test_dynamic_dispatch_mismatched_returned",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 67,
    "function": "BuffOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 548,
    "function": "TypedNativeFunction::type_native_function",
    "return_type": "-> TypedNativeFunction",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/error.rs",
    "line": 71,
    "function": "<impl DiagnosableError for LexerError>::level",
    "return_type": "-> crate::vm::diagnostic::Level",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 198,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_3_activation_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 172,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_consensus_hash_for_block",
    "return_type": "-> Option<ConsensusHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1771,
    "function": "TupleTypeSignature::max_depth",
    "return_type": "-> u8",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1071,
    "function": "Value::expect_list",
    "return_type": "-> Vec<Value>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 54,
    "function": "DefinitionSorter::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1156,
    "function": "TypeChecker<'a, 'b>::try_native_function_check",
    "return_type": "-> Option<TypeResult>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/mod.rs",
    "line": 2570,
    "function": "make_for_define",
    "return_type": "-> FunctionAPI",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 766,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 92,
    "function": "check_special_is_optional",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 244,
    "function": "check_special_burn_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 258,
    "function": "PreSymbolicExpression::copy_span",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 801,
    "function": "STXBalance::amount_unlocked",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::new((Some(Default::default()), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1812,
    "function": "parse_name_type_pairs",
    "return_type": "-> Result<Vec<(ClarityName, TypeSignature)>>",
    "replacement": "Ok(vec![(Default::default(), Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 752,
    "function": "OwnedEnvironment<'a, 'hooks>::execute_transaction",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 223,
    "function": "NFTTransferEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1053,
    "function": "Value::expect_buff",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 369,
    "function": "test_fully_qualified_contract_call",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 101,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 463,
    "function": "STXBalanceSnapshot<'db, 'conn>::is_v2_locked",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 95,
    "function": "make_docs",
    "return_type": "-> ContractRef",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 604,
    "function": "native_bitwise_right_shift",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 206,
    "function": "handle_define_fungible_token",
    "return_type": "-> Result<DefineResult>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 39,
    "function": "<impl AnalysisPass for TraitChecker>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 389,
    "function": "ContractInterface::serialize",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 801,
    "function": "STXBalance::amount_unlocked",
    "return_type": "-> u128",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 556,
    "function": "OwnedEnvironment<'a, 'hooks>::new_toplevel",
    "return_type": "-> OwnedEnvironment<'a, '_>",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 133,
    "function": "SqliteConnection::get_metadata",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 832,
    "function": "LimitedCostTracker::get_memory_limit",
    "return_type": "-> u64",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 155,
    "function": "special_principal_destruct",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1771,
    "function": "TupleTypeSignature::max_depth",
    "return_type": "-> u8",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 246,
    "function": "native_is_err",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 792,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new((Default::default(), BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 201,
    "function": "TraitsResolver::probe_for_generics",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 225,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 687,
    "function": "Parser<'a>::read_sugared_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 133,
    "function": "SqliteConnection::get_metadata",
    "return_type": "-> Option<String>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 384,
    "function": "RollbackWrapper<'a>::deserialize_value",
    "return_type": "-> Result<ValueResult, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1053,
    "function": "Value::expect_buff",
    "return_type": "-> Vec<u8>",
    "replacement": "vec![0]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 116,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 112,
    "function": "ReadOnlyChecker<'a, 'b>::check_top_level_expression",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 560,
    "function": "native_mul",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 304,
    "function": "ContractContext::get_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::from_iter([(Default::default(), Default::default())]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/mod.rs",
    "line": 569,
    "function": "execute_v2",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 78,
    "function": "<impl Display for SerializationError>::fmt",
    "return_type": "-> std::fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 48,
    "function": "TraitsResolver::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 935,
    "function": "test_overlapping_nfts",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 56,
    "function": "special_filter",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 469,
    "function": "special_set_entry_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 379,
    "function": "DefinitionSorter::find_expression_definition",
    "return_type": "-> Option<(ClarityName, u64, &'b PreSymbolicExpression)>",
    "replacement": "Some((Default::default(), 0, &Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 107,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 538,
    "function": "STXBalanceSnapshot<'db, 'conn>::lock_tokens_v2",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1191,
    "function": "BuffData::empty",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 218,
    "function": "to_consensus_buff",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 464,
    "function": "ListTypeData::destruct",
    "return_type": "-> (TypeSignature, u32)",
    "replacement": "(Default::default(), 1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1197,
    "function": "ListData::len",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1083,
    "function": "Parser<'a>::parse",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 348,
    "function": "SmartContractEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 50,
    "function": "sqlite_get",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 189,
    "function": "rollback_lookup_map",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([false])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 137,
    "function": "AnalysisDatabase<'a>::get_clarity_version",
    "return_type": "-> CheckResult<ClarityVersion>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 364,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 65,
    "function": "DefinitionSorter::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1126,
    "function": "Value::expect_callable",
    "return_type": "-> CallableData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 444,
    "function": "ListTypeData::new_list",
    "return_type": "-> Result<ListTypeData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 170,
    "function": "ReadOnlyChecker<'a, 'b>::check_define_function",
    "return_type": "-> CheckResult<(ClarityName, bool)>",
    "replacement": "CheckResult::new((Default::default(), false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 829,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_read_only",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 174,
    "function": "ArithmeticOnlyChecker<'a>::check_native_function",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 66,
    "function": "SugarExpander::transform",
    "return_type": "-> ParseResult<Vec<SymbolicExpression>>",
    "replacement": "ParseResult::from(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 114,
    "function": "<impl From for SerializationError>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 563,
    "function": "native_div",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 716,
    "function": "LimitedCostTracker::default_cost_contract_for_epoch",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([vec![]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1007,
    "function": "Value::string_utf8_from_bytes",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 466,
    "function": "RollbackWrapper<'a>::get_metadata",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::new(Some(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1600,
    "function": "test_pass_embedded_trait_to_subtrait_ok",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 425,
    "function": "RollbackWrapper<'a>::get_block_header_hash",
    "return_type": "-> Option<StacksBlockId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 41,
    "function": "U128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 891,
    "function": "compute_cost",
    "return_type": "-> Result<ExecutionCost>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 563,
    "function": "native_div",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 331,
    "function": "DefinedFunction::is_read_only",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 168,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from((Default::default(), vec![Default::default()], true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 139,
    "function": "SequenceSubtype::is_list_type",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 678,
    "function": "ClarityDatabase<'a>::set_contract_data_size",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 763,
    "function": "TypeSignature::concretize",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 281,
    "function": "special_as_max_len",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 357,
    "function": "DefinitionSorter::probe_for_dependencies_in_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 328,
    "function": "FunctionType::principal_to_callable_type",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 166,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_vrf_seed_for_block",
    "return_type": "-> Option<VRFSeed>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1812,
    "function": "parse_name_type_pairs",
    "return_type": "-> Result<Vec<(ClarityName, TypeSignature)>>",
    "replacement": "Ok(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/principals.rs",
    "line": 306,
    "function": "create_principal_destruct_tuple_from_strings",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 247,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_open_chain_tip_height",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1099,
    "function": "Value::expect_tuple",
    "return_type": "-> TupleData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 191,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 646,
    "function": "TypeChecker<'a, 'b>::try_native_function_check",
    "return_type": "-> Option<TypeResult>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1886,
    "function": "ClarityDatabase<'a>::make_key_for_account_unlock_height",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 349,
    "function": "AssetMap::commit_other",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 112,
    "function": "TypingContext<'a>::add_variable_type",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 65,
    "function": "symbols_from_values",
    "return_type": "-> Vec<SymbolicExpression>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 178,
    "function": "special_append",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 230,
    "function": "ContractAnalysis::check_trait_compliance",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 519,
    "function": "TypeSignature::admits",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/trait_checker/mod.rs",
    "line": 39,
    "function": "<impl AnalysisPass for TraitChecker>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 303,
    "function": "check_special_match_opt",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 264,
    "function": "check_special_append",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 525,
    "function": "ClarityDatabase<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "Some((Default::default(), vec![0]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 351,
    "function": "SequenceData::contains",
    "return_type": "-> Result<Option<usize>>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 78,
    "function": "CoverageReporter::to_file",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 91,
    "function": "SqliteConnection::insert_metadata",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1038,
    "function": "ClarityDatabase<'a>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1198,
    "function": "Value::sanitize_value",
    "return_type": "-> Option<(Value, bool)>",
    "replacement": "Some((Default::default(), true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1100,
    "function": "test_contract_of_value",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 766,
    "function": "TypeChecker<'a, 'b>::type_check_define_ft",
    "return_type": "-> CheckResult<ClarityName>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 186,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 126,
    "function": "ContractContext::add_map_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 88,
    "function": "create_principal_destruct_tuple",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1319,
    "function": "PrincipalData::parse_qualified_contract_principal",
    "return_type": "-> Result<PrincipalData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 616,
    "function": "STXBalanceSnapshot<'db, 'conn>::extend_lock_v3",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from_iter([0])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 253,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 181,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 40,
    "function": "<impl BuildASTPass for SugarExpander>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1463,
    "function": "TypeSignature::parse_optional_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 287,
    "function": "<impl HeadersDB for NullHeadersDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1714,
    "function": "GlobalContext<'a, 'hooks>::commit",
    "return_type": "-> Result<(Option<AssetMap>, Option<EventBatch>)>",
    "replacement": "Ok((None, Some(Default::default())))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 456,
    "function": "GraphWalker::get_sorted_dependencies",
    "return_type": "-> ParseResult<Vec<usize>>",
    "replacement": "ParseResult::from_iter([vec![0]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 551,
    "function": "SymbolicExpression::trait_reference",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 687,
    "function": "Parser<'a>::read_sugared_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 575,
    "function": "Lexer<'a>::read_utf8_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 479,
    "function": "TypeChecker<'a, 'b>::type_check",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 345,
    "function": "DefinitionSorter::probe_for_dependencies_in_list_of_wrapped_key_value_pairs",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 882,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::drop_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 102,
    "function": "<impl Error for SerializationError>::source",
    "return_type": "-> Option<&(dyn error::Error +'static)>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 464,
    "function": "SymbolicExpression::cons",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/crypto.rs",
    "line": 71,
    "function": "pubkey_to_address_v1",
    "return_type": "-> StacksAddress",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 463,
    "function": "Parser<'a>::open_tuple",
    "return_type": "-> ParseResult<SetupTupleResult>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 260,
    "function": "special_fetch_variable_v205",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 687,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_contract",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 188,
    "function": "check_special_tuple_cons",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1305,
    "function": "TypeSignature::empty_list",
    "return_type": "-> ListTypeData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 557,
    "function": "native_sub",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 779,
    "function": "TypeChecker<'a, 'b>::type_check_define_nft",
    "return_type": "-> CheckResult<(ClarityName, TypeSignature)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 48,
    "function": "<impl BuildASTPass for StackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1719,
    "function": "ClarityDatabase<'a>::get_ft_balance",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 263,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/sugar_expander/mod.rs",
    "line": 56,
    "function": "SugarExpander::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/define.rs",
    "line": 291,
    "function": "DefineFunctionsParsed<'a>::try_parse",
    "return_type": "-> std::result::Result<Option<DefineFunctionsParsed<'a>>, CheckErrors>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 806,
    "function": "<impl TryFrom for TupleTypeSignature>::try_from",
    "return_type": "-> Result<TupleTypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 156,
    "function": "check_special_fold",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 558,
    "function": "SymbolicExpression::field",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/sequences.rs",
    "line": 226,
    "function": "special_concat_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 495,
    "function": "RollbackWrapper<'a>::get_metadata_manual",
    "return_type": "-> InterpreterResult<Option<String>>",
    "replacement": "InterpreterResult::from_iter([None])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 639,
    "function": "native_to_int",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 699,
    "function": "ClarityDatabase<'a>::has_contract",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 624,
    "function": "TypeSignature::admits_type_v2_1",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 181,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1599,
    "function": "GlobalContext<'a, 'hooks>::get_asset_map",
    "return_type": "-> &mut AssetMap",
    "replacement": "Box::leak(Box::new(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 186,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burnchain_tokens_spent_for_winning_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1097,
    "function": "Value::try_deserialize_hex",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 800,
    "function": "<impl PartialEq for TupleData>::eq",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1025,
    "function": "<impl CostTracker for LimitedCostTracker>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 242,
    "function": "native_is_okay",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1962,
    "function": "CallStack::remove",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 61,
    "function": "ContractContext::check_name_used",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 297,
    "function": "FTTransferEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 853,
    "function": "TupleTypeSignature::is_empty",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 110,
    "function": "check_special_begin",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 216,
    "function": "native_some",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from(vec![(Default::default(), 1, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/contract_interface_builder/mod.rs",
    "line": 354,
    "function": "ContractInterfaceMap::from_map",
    "return_type": "-> Vec<ContractInterfaceMap>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 79,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 103,
    "function": "build_ast_with_rules",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/assets.rs",
    "line": 138,
    "function": "test_native_stx_ops",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 59,
    "function": "<impl AnalysisPass for ReadOnlyChecker<'a, 'b>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/callables.rs",
    "line": 87,
    "function": "NativeHandle::apply",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 58,
    "function": "ExpressionIdentifier::run_expression_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 82,
    "function": "TypingContext<'a>::extend",
    "return_type": "-> CheckResult<TypingContext>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from((Default::default(), vec![], true))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 324,
    "function": "DefinitionSorter::probe_for_dependencies_in_define_args",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 177,
    "function": "ContractContext::add_implemented_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 213,
    "function": "check_special_burn_asset",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 808,
    "function": "ClarityDatabase<'a>::get_v1_unlock_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/principals.rs",
    "line": 47,
    "function": "version_matches_current_network",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 186,
    "function": "ContractContext::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from_iter([(Default::default(), vec![Default::default()], false)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 195,
    "function": "ContractContext::get_nft_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 269,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::new(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/options.rs",
    "line": 220,
    "function": "is_some",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 766,
    "function": "BurnBlockInfoProperty::type_result",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 202,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 885,
    "function": "<impl CostTracker for Environment<'_, '_, '_>>::reset_memory",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 197,
    "function": "<impl SymbolicExpressionCommon for PreSymbolicExpression>::match_list_mut",
    "return_type": "-> Option<&mut[PreSymbolicExpression]>",
    "replacement": "Some(Vec::leak(Vec::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1092,
    "function": "<impl ToSql for ExecutionCost>::to_sql",
    "return_type": "-> rusqlite::Result<ToSqlOutput>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 53,
    "function": "buff_to_int_generic",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 355,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 259,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 89,
    "function": "analysis_typecheck_cost",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 114,
    "function": "native_buff_to_uint_be::convert_to_uint_be",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 297,
    "function": "trait_type_size",
    "return_type": "-> CheckResult<u64>",
    "replacement": "CheckResult::from(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 131,
    "function": "Parser<'a>::next_token",
    "return_type": "-> Option<PlacedToken>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 65,
    "function": "DefinitionSorter::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 252,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 486,
    "function": "ClarityDatabase<'a>::put_value_with_size",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 612,
    "function": "clarity2_inner_type_check_type",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::from(false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 213,
    "function": "NullBackingStore::as_clarity_db",
    "return_type": "-> ClarityDatabase",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 349,
    "function": "check_special_len",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 229,
    "function": "RollbackWrapper<'a>::get_cc_special_cases_handler",
    "return_type": "-> Option<SpecialCaseHandler>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1025,
    "function": "<impl CostTracker for LimitedCostTracker>::short_circuit_contract_call",
    "return_type": "-> Result<bool>",
    "replacement": "Ok(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 554,
    "function": "<impl Debug for CharType>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 367,
    "function": "check_special_element_at",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 472,
    "function": "STXBalanceSnapshot<'db, 'conn>::increase_lock_v2",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 284,
    "function": "AssetMap::get_next_amount",
    "return_type": "-> Result<u128>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1099,
    "function": "<impl FromSql for ExecutionCost>::column_result",
    "return_type": "-> FromSqlResult<ExecutionCost>",
    "replacement": "FromSqlResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 79,
    "function": "ContractContext::check_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 221,
    "function": "CostStateSummary::empty",
    "return_type": "-> CostStateSummary",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 376,
    "function": "<impl TryFrom for BufferLength>::try_from",
    "return_type": "-> Result<BufferLength>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 220,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1196,
    "function": "ExecutionCost::add_runtime",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 381,
    "function": "native_bitwise_not",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1162,
    "function": "Value::expect_result_err",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1205,
    "function": "ListData::append",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 41,
    "function": "U128Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 118,
    "function": "<impl AnalysisPass for TypeChecker<'_, '_>>::run_pass",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from_iter([()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 319,
    "function": "<impl DiagnosableError for CheckErrors>::message",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 429,
    "function": "Graph::nodes_count",
    "return_type": "-> usize",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 36,
    "function": "sqlite_put",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 1116,
    "function": "test_cc_trait_stack_depth",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 135,
    "function": "ContractAnalysis::add_public_function",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 307,
    "function": "DefinitionSorter::probe_for_dependencies_in_tuple",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 448,
    "function": "special_leq_v2",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 281,
    "function": "ReadOnlyChecker<'a, 'b>::check_native_function_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 378,
    "function": "check_special_match",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 81,
    "function": "SqliteConnection::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(String::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 163,
    "function": "ContractAnalysis::get_public_function_type",
    "return_type": "-> Option<&FunctionType>",
    "replacement": "Some(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/docs/contracts.rs",
    "line": 69,
    "function": "doc_execute",
    "return_type": "-> Result<Option<Value>, vm::Error>",
    "replacement": "Ok(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 195,
    "function": "<impl From for SerializedCostStateSummary>::from",
    "return_type": "-> SerializedCostStateSummary",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 321,
    "function": "<impl From for FunctionSignature>::from",
    "return_type": "-> FunctionSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 157,
    "function": "<impl HeadersDB for &dyn HeadersDB>::get_stacks_block_header_hash_for_block",
    "return_type": "-> Option<BlockHeaderHash>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 801,
    "function": "OwnedEnvironment<'a, 'hooks>::eval_raw",
    "return_type": "-> Result<(Value, AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 77,
    "function": "StandardPrincipalData::transient",
    "return_type": "-> StandardPrincipalData",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 158,
    "function": "Parser<'a>::peek_last_token",
    "return_type": "-> ParseResult<&PlacedToken>",
    "replacement": "ParseResult::from(&Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 364,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_stacks_epoch_by_epoch_id",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 160,
    "function": "check_special_merge",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1371,
    "function": "Environment<'a, 'b, 'hooks>::stx_transfer",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 364,
    "function": "native_xor",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 728,
    "function": "parse_no_stack_limit",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/mod.rs",
    "line": 614,
    "function": "check_secp256k1_recover",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 676,
    "function": "special_transfer_token",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/mod.rs",
    "line": 73,
    "function": "boot_util::boot_code_id",
    "return_type": "-> QualifiedContractIdentifier",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 202,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1939,
    "function": "CallStack::depth",
    "return_type": "-> usize",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/token.rs",
    "line": 82,
    "function": "Token::reproduce",
    "return_type": "-> String",
    "replacement": "String::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 309,
    "function": "build_ast",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((String::new(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1958,
    "function": "CallStack::decr_apply_depth",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/traits.rs",
    "line": 1289,
    "function": "test_return_trait_with_contract_of_wrapped_in_let",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 565,
    "function": "<impl Display for ASCIIData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1349,
    "function": "TypeSignature::construct_parent_list_type",
    "return_type": "-> Result<ListTypeData>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 208,
    "function": "AnalysisDatabase<'a>::get_implemented_traits",
    "return_type": "-> CheckResult<BTreeSet<TraitIdentifier>>",
    "replacement": "CheckResult::new(BTreeSet::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/sqlite.rs",
    "line": 81,
    "function": "SqliteConnection::get",
    "return_type": "-> Option<String>",
    "replacement": "Some(\"xyzzy\".into())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1000,
    "function": "<impl CostTracker for LimitedCostTracker>::add_memory",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 136,
    "function": "ContractContext::add_variable_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 156,
    "function": "check_special_fold",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 174,
    "function": "inner_build_ast",
    "return_type": "-> ParseResult<(ContractAST, Vec<Diagnostic>, bool)>",
    "replacement": "ParseResult::from_iter([(Default::default(), vec![], true)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1458,
    "function": "Environment<'a, 'b, 'hooks>::register_stx_burn_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 52,
    "function": "ASCIIOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 326,
    "function": "<impl HeadersDB for NullHeadersDB>::get_tokens_earned_for_block",
    "return_type": "-> Option<u128>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 57,
    "function": "execute",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 283,
    "function": "Parser<'a>::handle_open_tuple",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 1109,
    "function": "parse_collect_diagnostics",
    "return_type": "-> (Vec<PreSymbolicExpression>, Vec<Diagnostic>, bool)",
    "replacement": "(vec![], vec![Default::default()], true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 107,
    "function": "<impl CostTracker for TypeChecker<'_, '_>>::short_circuit_contract_call",
    "return_type": "-> std::result::Result<bool, CostErrors>",
    "replacement": "Ok(true)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1886,
    "function": "ClarityDatabase<'a>::make_key_for_account_unlock_height",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 152,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 545,
    "function": "<impl Display for CharType>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 278,
    "function": "SequenceData::element_at",
    "return_type": "-> Option<Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 474,
    "function": "Lexer<'a>::read_utf8_encoding",
    "return_type": "-> LexResult<Result<String, String>>",
    "replacement": "LexResult::new(Ok(\"xyzzy\".into()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 554,
    "function": "native_add",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/mod.rs",
    "line": 126,
    "function": "env_factory",
    "return_type": "-> MemoryEnvironmentGenerator",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 541,
    "function": "SymbolicExpression::list",
    "return_type": "-> SymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 120,
    "function": "<impl PartialEq for Error>::eq",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1019,
    "function": "ClarityDatabase<'a>::make_microblock_pubkey_height_key",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1279,
    "function": "ClarityDatabase<'a>::load_map",
    "return_type": "-> Result<DataMapMetadata>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1784,
    "function": "GlobalContext<'a, 'hooks>::destruct",
    "return_type": "-> Option<(ClarityDatabase<'a>, LimitedCostTracker)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1250,
    "function": "int_log2",
    "return_type": "-> Option<u64>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from_iter([Some(Default::default())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 137,
    "function": "AnalysisDatabase<'a>::get_clarity_version",
    "return_type": "-> CheckResult<ClarityVersion>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 546,
    "function": "special_less",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 244,
    "function": "ReadOnlyChecker<'a, 'b>::check_each_expression_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from(false)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 416,
    "function": "Graph::add_directed_edge",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 152,
    "function": "ContractContext::add_ft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/errors.rs",
    "line": 169,
    "function": "<impl From for Error>::from",
    "return_type": "-> Self",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1954,
    "function": "CallStack::incr_apply_depth",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 705,
    "function": "OwnedEnvironment<'a, 'hooks>::initialize_versioned_contract",
    "return_type": "-> Result<((), AssetMap, Vec<StacksTransactionEvent>)>",
    "replacement": "Ok(((), Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 149,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/mod.rs",
    "line": 96,
    "function": "version_string",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([\"xyzzy\".into()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 1, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/mod.rs",
    "line": 45,
    "function": "FunctionType::check_args",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 381,
    "function": "check_special_match",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 97,
    "function": "TypingContext<'a>::lookup_variable_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 201,
    "function": "TraitsResolver::probe_for_generics",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 455,
    "function": "lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 0, 1)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 356,
    "function": "PreSymbolicExpression::match_atom_value",
    "return_type": "-> Option<&Value>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 171,
    "function": "AnalysisDatabase<'a>::get_read_only_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 379,
    "function": "DefinitionSorter::find_expression_definition",
    "return_type": "-> Option<(ClarityName, u64, &'b PreSymbolicExpression)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 358,
    "function": "STXBalanceSnapshot<'db, 'conn>::get_available_balance",
    "return_type": "-> u128",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 424,
    "function": "STXBalanceSnapshot<'db, 'conn>::lock_tokens_v1",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/definition_sorter/mod.rs",
    "line": 425,
    "function": "Graph::has_node_descendants",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 376,
    "function": "STXBalanceSnapshot<'db, 'conn>::has_locked_tokens",
    "return_type": "-> bool",
    "replacement": "false",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 149,
    "function": "<impl HeadersDB for UnitTestHeaderDB>::get_burn_block_time_for_block",
    "return_type": "-> Option<u64>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 871,
    "function": "Value::size",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1696,
    "function": "TypeSignature::inner_type_size",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 490,
    "function": "AssetMap::get_nonfungible_tokens",
    "return_type": "-> Option<&Vec<Value>>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 66,
    "function": "Lexer<'a>::add_diagnostic",
    "return_type": "-> LexResult<()>",
    "replacement": "LexResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1090,
    "function": "Value::expect_bool",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 347,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "0",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1198,
    "function": "Value::sanitize_value",
    "return_type": "-> Option<(Value, bool)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/arithmetic_checker/mod.rs",
    "line": 132,
    "function": "ArithmeticOnlyChecker<'a>::check_expression",
    "return_type": "-> Result<(), Error>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 472,
    "function": "ClarityDatabase<'a>::get",
    "return_type": "-> Option<T>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 978,
    "function": "TypeSignature::max_string_ascii",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 517,
    "function": "RollbackWrapper<'a>::has_entry",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 96,
    "function": "QualifiedContractIdentifier::local",
    "return_type": "-> Result<QualifiedContractIdentifier>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1227,
    "function": "ASCIIData::len",
    "return_type": "-> BufferLength",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 103,
    "function": "build_ast_with_rules",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1943,
    "function": "ClarityDatabase<'a>::set_account_nonce",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 308,
    "function": "ContractContext::get_map_type",
    "return_type": "-> Option<&(TypeSignature, TypeSignature)>",
    "replacement": "Some(&(Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 535,
    "function": "Value::deserialize_read_count",
    "return_type": "-> Result<(Value, u64), SerializationError>",
    "replacement": "Ok((Default::default(), 1))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 860,
    "function": "ClarityDatabase<'a>::get_block_time",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 198,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_block_height",
    "return_type": "-> Option<u32>",
    "replacement": "Some(0)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 680,
    "function": "<impl SequencedValue for UTF8Data>::drained_items",
    "return_type": "-> Vec<Vec<u8>>",
    "replacement": "vec![vec![]]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 320,
    "function": "PreSymbolicExpression::list",
    "return_type": "-> PreSymbolicExpression",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1302,
    "function": "ClarityDatabase<'a>::make_key_for_data_map_entry_serialized",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::from_iter([vec![(Default::default(), 0, 1)]])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 1543,
    "function": "Environment<'a, 'b, 'hooks>::register_ft_mint_event",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 994,
    "function": "<impl CostTracker for LimitedCostTracker>::add_cost",
    "return_type": "-> std::result::Result<(), CostErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1250,
    "function": "int_log2",
    "return_type": "-> Option<u64>",
    "replacement": "Some(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 508,
    "function": "parse_lexed",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new(vec![])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/stack_depth_checker.rs",
    "line": 74,
    "function": "<impl BuildASTPass for VaryStackDepthChecker>::run_pass",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 193,
    "function": "<impl ClarityDeserializable for ContractCommitment>::deserialize",
    "return_type": "-> ContractCommitment",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/assets.rs",
    "line": 167,
    "function": "check_special_transfer_token",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1398,
    "function": "TypeChecker<'a, 'b>::type_check_define_trait",
    "return_type": "-> CheckResult<(ClarityName, BTreeMap<ClarityName, FunctionSignature>)>",
    "replacement": "CheckResult::new((Default::default(), BTreeMap::new()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 140,
    "function": "Lexer<'a>::read_line",
    "return_type": "-> LexResult<String>",
    "replacement": "LexResult::from_iter([String::new()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 463,
    "function": "SequenceData::concat",
    "return_type": "-> Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::new(false))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 546,
    "function": "special_less",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 136,
    "function": "<impl CostTracker for ()>::compute_cost",
    "return_type": "-> std::result::Result<ExecutionCost, CostErrors>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/mod.rs",
    "line": 134,
    "function": "check_special_get",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 185,
    "function": "native_int_to_string_generic",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v1.rs",
    "line": 192,
    "function": "inner_lex",
    "return_type": "-> ParseResult<Vec<(LexItem, u32, u32)>>",
    "replacement": "ParseResult::new(vec![(Default::default(), 1, 0)])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/events.rs",
    "line": 248,
    "function": "NFTMintEventData::json_serialize",
    "return_type": "-> serde_json::Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 395,
    "function": "<impl BurnStateDB for NullBurnStateDB>::get_pox_payout_addrs",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/errors.rs",
    "line": 295,
    "function": "check_arguments_at_most",
    "return_type": "-> Result<(), CheckErrors>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/coverage.rs",
    "line": 170,
    "function": "CoverageReporter::register_src_file",
    "return_type": "-> std::io::Result<()>",
    "replacement": "Ok(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 48,
    "function": "TraitsResolver::run",
    "return_type": "-> ParseResult<()>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/tests/contracts.rs",
    "line": 1018,
    "function": "test_as_max_len",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/database.rs",
    "line": 374,
    "function": "special_fetch_entry_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/sequences.rs",
    "line": 39,
    "function": "get_simple_native_or_user_define",
    "return_type": "-> CheckResult<FunctionType>",
    "replacement": "CheckResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/contexts.rs",
    "line": 125,
    "function": "TypingContext<'a>::add_trait_reference",
    "return_type": "",
    "replacement": "()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 368,
    "function": "STXBalanceSnapshot<'db, 'conn>::canonical_balance_repr",
    "return_type": "-> STXBalance",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 112,
    "function": "ReadOnlyChecker<'a, 'b>::check_top_level_expression",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1957,
    "function": "ClarityDatabase<'a>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/mod.rs",
    "line": 197,
    "function": "NativeFunctions::lookup_by_name_at_version",
    "return_type": "-> Option<NativeFunctions>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/mod.rs",
    "line": 50,
    "function": "mem_type_check",
    "return_type": "-> CheckResult<(Option<TypeSignature>, ContractAnalysis)>",
    "replacement": "CheckResult::from((Some(Default::default()), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 116,
    "function": "ContractContext::add_private_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1117,
    "function": "<impl CostOverflowingMath for u64>::cost_overflow_add",
    "return_type": "-> Result<u64>",
    "replacement": "Ok(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 193,
    "function": "special_stx_transfer_memo",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/options.rs",
    "line": 281,
    "function": "eval_with_new_binding",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/natives/sequences.rs",
    "line": 448,
    "function": "check_special_replace_at",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 265,
    "function": "SequenceData::len",
    "return_type": "-> usize",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 807,
    "function": "Parser<'a>::parse_node",
    "return_type": "-> ParseResult<Option<PreSymbolicExpression>>",
    "replacement": "ParseResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::from(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/key_value_wrapper.rs",
    "line": 338,
    "function": "RollbackWrapper<'a>::set_block_hash",
    "return_type": "-> InterpreterResult<StacksBlockId>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1039,
    "function": "TypeChecker<'a, 'b>::type_check_function_type",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/analysis_db.rs",
    "line": 153,
    "function": "AnalysisDatabase<'a>::get_public_function_type",
    "return_type": "-> CheckResult<Option<FunctionType>>",
    "replacement": "CheckResult::new(None)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 652,
    "function": "OwnedEnvironment<'a, 'hooks>::execute_in_env",
    "return_type": "-> std::result::Result<(A, AssetMap, Vec<StacksTransactionEvent>), E>",
    "replacement": "Ok((Default::default(), Default::default(), vec![Default::default()]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1139,
    "function": "Value::serialized_size",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 256,
    "function": "SequenceData::element_size",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 809,
    "function": "special_get_owner_v200",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 210,
    "function": "Lexer<'a>::read_identifier",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 381,
    "function": "native_bitwise_not",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 62,
    "function": "TraitContext::add_defined_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/contexts.rs",
    "line": 490,
    "function": "AssetMap::get_nonfungible_tokens",
    "return_type": "-> Option<&Vec<Value>>",
    "replacement": "Some(&vec![Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 87,
    "function": "ast_check_size",
    "return_type": "-> ParseResult<ContractAST>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 951,
    "function": "Value::buff_from_byte",
    "return_type": "-> Value",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 498,
    "function": "TypeSignature::new_response",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 268,
    "function": "ReadOnlyChecker<'a, 'b>::try_check_native_function_is_read_only",
    "return_type": "-> Option<CheckResult<bool>>",
    "replacement": "Some(CheckResult::from_iter([false]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 305,
    "function": "type_reserved_variable",
    "return_type": "-> Option<TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 247,
    "function": "FunctionType::check_args_by_allowing_trait_cast_2_05",
    "return_type": "-> CheckResult<TypeSignature>",
    "replacement": "CheckResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 533,
    "function": "ClarityDatabase<'a>::make_key_for_trip",
    "return_type": "-> String",
    "replacement": "\"xyzzy\".into()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/traits_resolver/mod.rs",
    "line": 182,
    "function": "TraitsResolver::try_parse_pre_expr",
    "return_type": "-> Option<(DefineFunctions, Vec<&'a PreSymbolicExpression>)>",
    "replacement": "Some((Default::default(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 894,
    "function": "special_get_token_supply",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 687,
    "function": "Parser<'a>::read_sugared_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::from(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 1055,
    "function": "TypeChecker<'a, 'b>::type_check_define_function",
    "return_type": "-> CheckResult<(ClarityName, FixedFunction)>",
    "replacement": "CheckResult::from((Default::default(), Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 59,
    "function": "UTF8Ops::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/test_util/mod.rs",
    "line": 247,
    "function": "<impl BurnStateDB for UnitTestBurnStateDB>::get_burn_start_height",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 209,
    "function": "<impl BurnStateDB for &dyn BurnStateDB>::get_sortition_id_from_consensus_hash",
    "return_type": "-> Option<SortitionId>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/assets.rs",
    "line": 98,
    "function": "special_stx_balance",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 521,
    "function": "Parser<'a>::read_principal",
    "return_type": "-> ParseResult<PreSymbolicExpression>",
    "replacement": "ParseResult::from_iter([Default::default()])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1201,
    "function": "ListData::is_empty",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/contexts.rs",
    "line": 106,
    "function": "ContractContext::add_read_only_function_type",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::from(())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 394,
    "function": "<impl From for u32>::from",
    "return_type": "-> u32",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 1957,
    "function": "ClarityDatabase<'a>::get_stacks_epoch",
    "return_type": "-> Option<StacksEpoch>",
    "replacement": "Some(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/conversions.rs",
    "line": 113,
    "function": "native_buff_to_uint_be",
    "return_type": "-> Result<Value>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 299,
    "function": "<impl ClarityBackingStore for MemoryBackingStore>::get_with_proof",
    "return_type": "-> Option<(String, Vec<u8>)>",
    "replacement": "Some((\"xyzzy\".into(), vec![]))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/read_only_checker/mod.rs",
    "line": 430,
    "function": "ReadOnlyChecker<'a, 'b>::check_expression_application_is_read_only",
    "return_type": "-> CheckResult<bool>",
    "replacement": "CheckResult::from_iter([false])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/variables.rs",
    "line": 63,
    "function": "lookup_reserved_variable",
    "return_type": "-> Result<Option<Value>>",
    "replacement": "Ok(Some(Default::default()))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_store.rs",
    "line": 235,
    "function": "<impl ClarityBackingStore for NullBackingStore>::get_side_store",
    "return_type": "-> &Connection",
    "replacement": "&Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/mod.rs",
    "line": 188,
    "function": "Parser<'a>::ignore_whitespace_and_comments",
    "return_type": "-> Vec<PreSymbolicExpression>",
    "replacement": "vec![]",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/costs/mod.rs",
    "line": 1137,
    "function": "ExecutionCost::proportion_largest_dimension",
    "return_type": "-> u64",
    "replacement": "1",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 857,
    "function": "TupleTypeSignature::field_type",
    "return_type": "-> Option<&TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 525,
    "function": "ClarityDatabase<'a>::get_with_proof",
    "return_type": "-> Option<(T, Vec<u8>)>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 1417,
    "function": "TypeSignature::parse_buff_type_repr",
    "return_type": "-> Result<TypeSignature>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 292,
    "function": "ContractContext::add_used_trait",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/mod.rs",
    "line": 845,
    "function": "type_reserved_variable",
    "return_type": "-> Option<TypeSignature>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/serialization.rs",
    "line": 1127,
    "function": "Value::try_deserialize_bytes_untyped",
    "return_type": "-> Result<Value, SerializationError>",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/types.rs",
    "line": 190,
    "function": "ContractAnalysis::get_defined_trait",
    "return_type": "-> Option<&BTreeMap<ClarityName, FunctionSignature>>",
    "replacement": "Some(&BTreeMap::new())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/representations.rs",
    "line": 578,
    "function": "SymbolicExpression::match_atom",
    "return_type": "-> Option<&ClarityName>",
    "replacement": "None",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/mod.rs",
    "line": 808,
    "function": "TypeChecker<'a, 'b>::try_type_check_define",
    "return_type": "-> CheckResult<Option<()>>",
    "replacement": "CheckResult::from_iter([Some(())])",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/mod.rs",
    "line": 69,
    "function": "parse_in_epoch",
    "return_type": "-> ParseResult<Vec<PreSymbolicExpression>>",
    "replacement": "ParseResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/signatures.rs",
    "line": 966,
    "function": "TypeSignature::min_string_ascii",
    "return_type": "-> TypeSignature",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_05/natives/options.rs",
    "line": 32,
    "function": "check_special_okay",
    "return_type": "-> TypeResult",
    "replacement": "Default::default()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/structures.rs",
    "line": 680,
    "function": "STXBalanceSnapshot<'db, 'conn>::is_v3_locked",
    "return_type": "-> bool",
    "replacement": "true",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 52,
    "function": "ASCIIOps::make_value",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/functions/arithmetic.rs",
    "line": 377,
    "function": "native_bitwise_or",
    "return_type": "-> InterpreterResult<Value>",
    "replacement": "InterpreterResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/types/mod.rs",
    "line": 1547,
    "function": "<impl Display for TupleData>::fmt",
    "return_type": "-> fmt::Result",
    "replacement": "Ok(Default::default())",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/expression_identifier/mod.rs",
    "line": 23,
    "function": "inner_relabel",
    "return_type": "-> ParseResult<u64>",
    "replacement": "ParseResult::from(1)",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/database/clarity_db.rs",
    "line": 937,
    "function": "ClarityDatabase<'a>::get_pox_payout_addrs_for_burnchain_height",
    "return_type": "-> Option<(Vec<TupleData>, u128)>",
    "replacement": "Some((vec![Default::default()], 0))",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/analysis/type_checker/v2_1/contexts.rs",
    "line": 269,
    "function": "ContractContext::add_nft",
    "return_type": "-> CheckResult<()>",
    "replacement": "CheckResult::new()",
    "genre": "FnValue"
  },
  {
    "package": "clarity",
    "file": "clarity/src/vm/ast/parser/v2/lexer/mod.rs",
    "line": 575,
    "function": "Lexer<'a>::read_utf8_string",
    "return_type": "-> LexResult<Token>",
    "replacement": "LexResult::from_iter([Default::default()])",
    "genre": "FnValue"
  }
]